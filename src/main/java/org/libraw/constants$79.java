// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.FunctionDescriptor;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_FLOAT;
import static jdk.incubator.foreign.CLinker.C_INT;

class constants$79 {

    static final FunctionDescriptor j1f$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle j1f$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "j1f",
            "(F)F",
            constants$79.j1f$FUNC, false
    );
    static final FunctionDescriptor __j1f$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __j1f$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__j1f",
            "(F)F",
            constants$79.__j1f$FUNC, false
    );
    static final FunctionDescriptor jnf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_INT,
            C_FLOAT
    );
    static final MethodHandle jnf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "jnf",
            "(IF)F",
            constants$79.jnf$FUNC, false
    );
    static final FunctionDescriptor __jnf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_INT,
            C_FLOAT
    );
    static final MethodHandle __jnf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__jnf",
            "(IF)F",
            constants$79.__jnf$FUNC, false
    );
    static final FunctionDescriptor y0f$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle y0f$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "y0f",
            "(F)F",
            constants$79.y0f$FUNC, false
    );
    static final FunctionDescriptor __y0f$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __y0f$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__y0f",
            "(F)F",
            constants$79.__y0f$FUNC, false
    );
}


