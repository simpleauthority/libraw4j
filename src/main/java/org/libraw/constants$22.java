// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.FunctionDescriptor;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_POINTER;

class constants$22 {

    static final FunctionDescriptor ctermid$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER
    );
    static final MethodHandle ctermid$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "ctermid",
            "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            constants$22.ctermid$FUNC, false
    );
    static final FunctionDescriptor flockfile$FUNC = FunctionDescriptor.ofVoid(
            C_POINTER
    );
    static final MethodHandle flockfile$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "flockfile",
            "(Ljdk/incubator/foreign/MemoryAddress;)V",
            constants$22.flockfile$FUNC, false
    );
    static final FunctionDescriptor ftrylockfile$FUNC = FunctionDescriptor.of(C_INT,
            C_POINTER
    );
    static final MethodHandle ftrylockfile$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "ftrylockfile",
            "(Ljdk/incubator/foreign/MemoryAddress;)I",
            constants$22.ftrylockfile$FUNC, false
    );
    static final FunctionDescriptor funlockfile$FUNC = FunctionDescriptor.ofVoid(
            C_POINTER
    );
    static final MethodHandle funlockfile$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "funlockfile",
            "(Ljdk/incubator/foreign/MemoryAddress;)V",
            constants$22.funlockfile$FUNC, false
    );
    static final FunctionDescriptor __uflow$FUNC = FunctionDescriptor.of(C_INT,
            C_POINTER
    );
    static final MethodHandle __uflow$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__uflow",
            "(Ljdk/incubator/foreign/MemoryAddress;)I",
            constants$22.__uflow$FUNC, false
    );
    static final FunctionDescriptor __overflow$FUNC = FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_INT
    );
    static final MethodHandle __overflow$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__overflow",
            "(Ljdk/incubator/foreign/MemoryAddress;I)I",
            constants$22.__overflow$FUNC, false
    );
}


