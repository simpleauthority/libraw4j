// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.FunctionDescriptor;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_FLOAT;

class constants$67 {

    static final FunctionDescriptor __atanf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __atanf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__atanf",
            "(F)F",
            constants$67.__atanf$FUNC, false
    );
    static final FunctionDescriptor atan2f$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle atan2f$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "atan2f",
            "(FF)F",
            constants$67.atan2f$FUNC, false
    );
    static final FunctionDescriptor __atan2f$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __atan2f$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__atan2f",
            "(FF)F",
            constants$67.__atan2f$FUNC, false
    );
    static final FunctionDescriptor cosf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle cosf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "cosf",
            "(F)F",
            constants$67.cosf$FUNC, false
    );
    static final FunctionDescriptor __cosf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __cosf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__cosf",
            "(F)F",
            constants$67.__cosf$FUNC, false
    );
    static final FunctionDescriptor sinf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle sinf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "sinf",
            "(F)F",
            constants$67.sinf$FUNC, false
    );
}


