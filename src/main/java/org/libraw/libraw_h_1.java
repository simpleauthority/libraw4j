// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ValueLayout;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_LONG_LONG;

class libraw_h_1 {

    public static ValueLayout INT64 = C_LONG_LONG;

    public static int LIBRAW_DNGFM_COLORMATRIX() {
        return (int) 4L;
    }

    public static int LIBRAW_DNGFM_CALIBRATION() {
        return (int) 8L;
    }

    public static int LIBRAW_DNGFM_ANALOGBALANCE() {
        return (int) 16L;
    }

    public static int LIBRAW_DNGFM_BLACK() {
        return (int) 32L;
    }

    public static int LIBRAW_DNGFM_WHITE() {
        return (int) 64L;
    }

    public static int LIBRAW_DNGFM_OPCODE2() {
        return (int) 128L;
    }

    public static int LIBRAW_DNGFM_LINTABLE() {
        return (int) 256L;
    }

    public static int LIBRAW_DNGFM_CROPORIGIN() {
        return (int) 512L;
    }

    public static int LIBRAW_DNGFM_CROPSIZE() {
        return (int) 1024L;
    }

    public static int LIBRAW_DNGFM_PREVIEWCS() {
        return (int) 2048L;
    }

    public static int LIBRAW_DNGFM_ASSHOTNEUTRAL() {
        return (int) 4096L;
    }

    public static int LIBRAW_DNGFM_BASELINEEXPOSURE() {
        return (int) 8192L;
    }

    public static int LIBRAW_DNGFM_LINEARRESPONSELIMIT() {
        return (int) 16384L;
    }

    public static int LIBRAW_ASWB_APPLIED() {
        return (int) 1L;
    }

    public static int LIBRAW_ASWB_CANON() {
        return (int) 2L;
    }

    public static int LIBRAW_ASWB_NIKON() {
        return (int) 4L;
    }

    public static int LIBRAW_ASWB_NIKON_SRAW() {
        return (int) 8L;
    }

    public static int LIBRAW_ASWB_PENTAX() {
        return (int) 16L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_UNKNOWN() {
        return (int) 0L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_BYTE() {
        return (int) 1L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_ASCII() {
        return (int) 2L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_SHORT() {
        return (int) 3L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_LONG() {
        return (int) 4L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_RATIONAL() {
        return (int) 5L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_SBYTE() {
        return (int) 6L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_UNDEFINED() {
        return (int) 7L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_SSHORT() {
        return (int) 8L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_SLONG() {
        return (int) 9L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_SRATIONAL() {
        return (int) 10L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_FLOAT() {
        return (int) 11L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_DOUBLE() {
        return (int) 12L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_IFD() {
        return (int) 13L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_UNICODE() {
        return (int) 14L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_COMPLEX() {
        return (int) 15L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_LONG8() {
        return (int) 16L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_SLONG8() {
        return (int) 17L;
    }

    public static int LIBRAW_EXIFTAG_TYPE_IFD8() {
        return (int) 18L;
    }

    public static int LIBRAW_WBI_Unknown() {
        return (int) 0L;
    }

    public static int LIBRAW_WBI_Daylight() {
        return (int) 1L;
    }

    public static int LIBRAW_WBI_Fluorescent() {
        return (int) 2L;
    }

    public static int LIBRAW_WBI_Tungsten() {
        return (int) 3L;
    }

    public static int LIBRAW_WBI_Flash() {
        return (int) 4L;
    }

    public static int LIBRAW_WBI_FineWeather() {
        return (int) 9L;
    }

    public static int LIBRAW_WBI_Cloudy() {
        return (int) 10L;
    }

    public static int LIBRAW_WBI_Shade() {
        return (int) 11L;
    }

    public static int LIBRAW_WBI_FL_D() {
        return (int) 12L;
    }

    public static int LIBRAW_WBI_FL_N() {
        return (int) 13L;
    }

    public static int LIBRAW_WBI_FL_W() {
        return (int) 14L;
    }

    public static int LIBRAW_WBI_FL_WW() {
        return (int) 15L;
    }

    public static int LIBRAW_WBI_FL_L() {
        return (int) 16L;
    }

    public static int LIBRAW_WBI_Ill_A() {
        return (int) 17L;
    }

    public static int LIBRAW_WBI_Ill_B() {
        return (int) 18L;
    }

    public static int LIBRAW_WBI_Ill_C() {
        return (int) 19L;
    }

    public static int LIBRAW_WBI_D55() {
        return (int) 20L;
    }

    public static int LIBRAW_WBI_D65() {
        return (int) 21L;
    }

    public static int LIBRAW_WBI_D75() {
        return (int) 22L;
    }

    public static int LIBRAW_WBI_D50() {
        return (int) 23L;
    }

    public static int LIBRAW_WBI_StudioTungsten() {
        return (int) 24L;
    }

    public static int LIBRAW_WBI_Sunset() {
        return (int) 64L;
    }

    public static int LIBRAW_WBI_Underwater() {
        return (int) 65L;
    }

    public static int LIBRAW_WBI_FluorescentHigh() {
        return (int) 66L;
    }

    public static int LIBRAW_WBI_HT_Mercury() {
        return (int) 67L;
    }

    public static int LIBRAW_WBI_AsShot() {
        return (int) 81L;
    }

    public static int LIBRAW_WBI_Auto() {
        return (int) 82L;
    }

    public static int LIBRAW_WBI_Custom() {
        return (int) 83L;
    }

    public static int LIBRAW_WBI_Auto1() {
        return (int) 85L;
    }

    public static int LIBRAW_WBI_Auto2() {
        return (int) 86L;
    }

    public static int LIBRAW_WBI_Auto3() {
        return (int) 87L;
    }

    public static int LIBRAW_WBI_Auto4() {
        return (int) 88L;
    }

    public static int LIBRAW_WBI_Custom1() {
        return (int) 90L;
    }

    public static int LIBRAW_WBI_Custom2() {
        return (int) 91L;
    }

    public static int LIBRAW_WBI_Custom3() {
        return (int) 92L;
    }

    public static int LIBRAW_WBI_Custom4() {
        return (int) 93L;
    }

    public static int LIBRAW_WBI_Custom5() {
        return (int) 94L;
    }

    public static int LIBRAW_WBI_Custom6() {
        return (int) 95L;
    }

    public static int LIBRAW_WBI_PC_Set1() {
        return (int) 96L;
    }

    public static int LIBRAW_WBI_PC_Set2() {
        return (int) 97L;
    }

    public static int LIBRAW_WBI_PC_Set3() {
        return (int) 98L;
    }

    public static int LIBRAW_WBI_PC_Set4() {
        return (int) 99L;
    }

    public static int LIBRAW_WBI_PC_Set5() {
        return (int) 100L;
    }

    public static int LIBRAW_WBI_Measured() {
        return (int) 110L;
    }

    public static int LIBRAW_WBI_BW() {
        return (int) 120L;
    }

    public static int LIBRAW_WBI_Kelvin() {
        return (int) 254L;
    }

    public static int LIBRAW_WBI_Other() {
        return (int) 255L;
    }

    public static int LIBRAW_WBI_None() {
        return (int) 65535L;
    }

    public static int LIBRAW_ME_NONE() {
        return (int) 0L;
    }

    public static int LIBRAW_ME_SIMPLE() {
        return (int) 1L;
    }

    public static int LIBRAW_ME_OVERLAY() {
        return (int) 2L;
    }

    public static int LIBRAW_ME_HDR() {
        return (int) 3L;
    }

    public static int LIBRAW_DNG_NONE() {
        return (int) 0L;
    }

    public static int LIBRAW_DNG_FLOAT() {
        return (int) 1L;
    }

    public static int LIBRAW_DNG_LINEAR() {
        return (int) 2L;
    }

    public static int LIBRAW_DNG_DEFLATE() {
        return (int) 4L;
    }

    public static int LIBRAW_DNG_XTRANS() {
        return (int) 8L;
    }

    public static int LIBRAW_DNG_OTHER() {
        return (int) 16L;
    }

    public static int LIBRAW_DNG_8BIT() {
        return (int) 32L;
    }

    public static int LIBRAW_DNG_ALL() {
        return (int) 59L;
    }

    public static int LIBRAW_DNG_DEFAULT() {
        return (int) 39L;
    }

    public static int LIBRAW_CAPS_RAWSPEED() {
        return (int) 1L;
    }

    public static int LIBRAW_CAPS_DNGSDK() {
        return (int) 2L;
    }

    public static int LIBRAW_CAPS_GPRSDK() {
        return (int) 4L;
    }

    public static int LIBRAW_CAPS_UNICODEPATHS() {
        return (int) 8L;
    }

    public static int LIBRAW_CAPS_X3FTOOLS() {
        return (int) 16L;
    }

    public static int LIBRAW_CAPS_RPI6BY9() {
        return (int) 32L;
    }

    public static int LIBRAW_COLORSPACE_NotFound() {
        return (int) 0L;
    }

    public static int LIBRAW_COLORSPACE_sRGB() {
        return (int) 1L;
    }

    public static int LIBRAW_COLORSPACE_AdobeRGB() {
        return (int) 2L;
    }

    public static int LIBRAW_COLORSPACE_WideGamutRGB() {
        return (int) 3L;
    }

    public static int LIBRAW_COLORSPACE_ProPhotoRGB() {
        return (int) 4L;
    }

    public static int LIBRAW_COLORSPACE_ICC() {
        return (int) 5L;
    }

    public static int LIBRAW_COLORSPACE_Uncalibrated() {
        return (int) 6L;
    }

    public static int LIBRAW_COLORSPACE_CameraLinearUniWB() {
        return (int) 7L;
    }

    public static int LIBRAW_COLORSPACE_CameraLinear() {
        return (int) 8L;
    }

    public static int LIBRAW_COLORSPACE_CameraGammaUniWB() {
        return (int) 9L;
    }

    public static int LIBRAW_COLORSPACE_CameraGamma() {
        return (int) 10L;
    }

    public static int LIBRAW_COLORSPACE_MonochromeLinear() {
        return (int) 11L;
    }

    public static int LIBRAW_COLORSPACE_MonochromeGamma() {
        return (int) 12L;
    }

    public static int LIBRAW_COLORSPACE_Unknown() {
        return (int) 255L;
    }

    public static int LIBRAW_CAMERAMAKER_Unknown() {
        return (int) 0L;
    }

    public static int LIBRAW_CAMERAMAKER_Agfa() {
        return (int) 1L;
    }

    public static int LIBRAW_CAMERAMAKER_Alcatel() {
        return (int) 2L;
    }

    public static int LIBRAW_CAMERAMAKER_Apple() {
        return (int) 3L;
    }

    public static int LIBRAW_CAMERAMAKER_Aptina() {
        return (int) 4L;
    }

    public static int LIBRAW_CAMERAMAKER_AVT() {
        return (int) 5L;
    }

    public static int LIBRAW_CAMERAMAKER_Baumer() {
        return (int) 6L;
    }

    public static int LIBRAW_CAMERAMAKER_Broadcom() {
        return (int) 7L;
    }

    public static int LIBRAW_CAMERAMAKER_Canon() {
        return (int) 8L;
    }

    public static int LIBRAW_CAMERAMAKER_Casio() {
        return (int) 9L;
    }

    public static int LIBRAW_CAMERAMAKER_CINE() {
        return (int) 10L;
    }

    public static int LIBRAW_CAMERAMAKER_Clauss() {
        return (int) 11L;
    }

    public static int LIBRAW_CAMERAMAKER_Contax() {
        return (int) 12L;
    }

    public static int LIBRAW_CAMERAMAKER_Creative() {
        return (int) 13L;
    }

    public static int LIBRAW_CAMERAMAKER_DJI() {
        return (int) 14L;
    }

    public static int LIBRAW_CAMERAMAKER_DXO() {
        return (int) 15L;
    }

    public static int LIBRAW_CAMERAMAKER_Epson() {
        return (int) 16L;
    }

    public static int LIBRAW_CAMERAMAKER_Foculus() {
        return (int) 17L;
    }

    public static int LIBRAW_CAMERAMAKER_Fujifilm() {
        return (int) 18L;
    }

    public static int LIBRAW_CAMERAMAKER_Generic() {
        return (int) 19L;
    }

    public static int LIBRAW_CAMERAMAKER_Gione() {
        return (int) 20L;
    }

    public static int LIBRAW_CAMERAMAKER_GITUP() {
        return (int) 21L;
    }

    public static int LIBRAW_CAMERAMAKER_Google() {
        return (int) 22L;
    }

    public static int LIBRAW_CAMERAMAKER_GoPro() {
        return (int) 23L;
    }

    public static int LIBRAW_CAMERAMAKER_Hasselblad() {
        return (int) 24L;
    }

    public static int LIBRAW_CAMERAMAKER_HTC() {
        return (int) 25L;
    }

    public static int LIBRAW_CAMERAMAKER_I_Mobile() {
        return (int) 26L;
    }

    public static int LIBRAW_CAMERAMAKER_Imacon() {
        return (int) 27L;
    }

    public static int LIBRAW_CAMERAMAKER_JK_Imaging() {
        return (int) 28L;
    }

    public static int LIBRAW_CAMERAMAKER_Kodak() {
        return (int) 29L;
    }

    public static int LIBRAW_CAMERAMAKER_Konica() {
        return (int) 30L;
    }

    public static int LIBRAW_CAMERAMAKER_Leaf() {
        return (int) 31L;
    }

    public static int LIBRAW_CAMERAMAKER_Leica() {
        return (int) 32L;
    }

    public static int LIBRAW_CAMERAMAKER_Lenovo() {
        return (int) 33L;
    }

    public static int LIBRAW_CAMERAMAKER_LG() {
        return (int) 34L;
    }

    public static int LIBRAW_CAMERAMAKER_Logitech() {
        return (int) 35L;
    }

    public static int LIBRAW_CAMERAMAKER_Mamiya() {
        return (int) 36L;
    }

    public static int LIBRAW_CAMERAMAKER_Matrix() {
        return (int) 37L;
    }

    public static int LIBRAW_CAMERAMAKER_Meizu() {
        return (int) 38L;
    }

    public static int LIBRAW_CAMERAMAKER_Micron() {
        return (int) 39L;
    }

    public static int LIBRAW_CAMERAMAKER_Minolta() {
        return (int) 40L;
    }

    public static int LIBRAW_CAMERAMAKER_Motorola() {
        return (int) 41L;
    }

    public static int LIBRAW_CAMERAMAKER_NGM() {
        return (int) 42L;
    }

    public static int LIBRAW_CAMERAMAKER_Nikon() {
        return (int) 43L;
    }

    public static int LIBRAW_CAMERAMAKER_Nokia() {
        return (int) 44L;
    }

    public static int LIBRAW_CAMERAMAKER_Olympus() {
        return (int) 45L;
    }

    public static int LIBRAW_CAMERAMAKER_OmniVison() {
        return (int) 46L;
    }

    public static int LIBRAW_CAMERAMAKER_Panasonic() {
        return (int) 47L;
    }

    public static int LIBRAW_CAMERAMAKER_Parrot() {
        return (int) 48L;
    }

    public static int LIBRAW_CAMERAMAKER_Pentax() {
        return (int) 49L;
    }

    public static int LIBRAW_CAMERAMAKER_PhaseOne() {
        return (int) 50L;
    }

    public static int LIBRAW_CAMERAMAKER_PhotoControl() {
        return (int) 51L;
    }

    public static int LIBRAW_CAMERAMAKER_Photron() {
        return (int) 52L;
    }

    public static int LIBRAW_CAMERAMAKER_Pixelink() {
        return (int) 53L;
    }

    public static int LIBRAW_CAMERAMAKER_Polaroid() {
        return (int) 54L;
    }

    public static int LIBRAW_CAMERAMAKER_RED() {
        return (int) 55L;
    }

    public static int LIBRAW_CAMERAMAKER_Ricoh() {
        return (int) 56L;
    }

    public static int LIBRAW_CAMERAMAKER_Rollei() {
        return (int) 57L;
    }

    public static int LIBRAW_CAMERAMAKER_RoverShot() {
        return (int) 58L;
    }

    public static int LIBRAW_CAMERAMAKER_Samsung() {
        return (int) 59L;
    }

    public static int LIBRAW_CAMERAMAKER_Sigma() {
        return (int) 60L;
    }

    public static int LIBRAW_CAMERAMAKER_Sinar() {
        return (int) 61L;
    }

    public static int LIBRAW_CAMERAMAKER_SMaL() {
        return (int) 62L;
    }

    public static int LIBRAW_CAMERAMAKER_Sony() {
        return (int) 63L;
    }

    public static int LIBRAW_CAMERAMAKER_ST_Micro() {
        return (int) 64L;
    }

    public static int LIBRAW_CAMERAMAKER_THL() {
        return (int) 65L;
    }

    public static int LIBRAW_CAMERAMAKER_VLUU() {
        return (int) 66L;
    }

    public static int LIBRAW_CAMERAMAKER_Xiaomi() {
        return (int) 67L;
    }

    public static int LIBRAW_CAMERAMAKER_XIAOYI() {
        return (int) 68L;
    }

    public static int LIBRAW_CAMERAMAKER_YI() {
        return (int) 69L;
    }

    public static int LIBRAW_CAMERAMAKER_Yuneec() {
        return (int) 70L;
    }

    public static int LIBRAW_CAMERAMAKER_Zeiss() {
        return (int) 71L;
    }

    public static int LIBRAW_CAMERAMAKER_TheLastOne() {
        return (int) 72L;
    }

    public static int LIBRAW_MOUNT_Unknown() {
        return (int) 0L;
    }

    public static int LIBRAW_MOUNT_Alpa() {
        return (int) 1L;
    }

    public static int LIBRAW_MOUNT_C() {
        return (int) 2L;
    }

    public static int LIBRAW_MOUNT_Canon_EF_M() {
        return (int) 3L;
    }

    public static int LIBRAW_MOUNT_Canon_EF_S() {
        return (int) 4L;
    }

    public static int LIBRAW_MOUNT_Canon_EF() {
        return (int) 5L;
    }

    public static int LIBRAW_MOUNT_Canon_RF() {
        return (int) 6L;
    }

    public static int LIBRAW_MOUNT_Contax_N() {
        return (int) 7L;
    }

    public static int LIBRAW_MOUNT_Contax645() {
        return (int) 8L;
    }

    public static int LIBRAW_MOUNT_FT() {
        return (int) 9L;
    }

    public static int LIBRAW_MOUNT_mFT() {
        return (int) 10L;
    }

    public static int LIBRAW_MOUNT_Fuji_GF() {
        return (int) 11L;
    }

    public static int LIBRAW_MOUNT_Fuji_GX() {
        return (int) 12L;
    }

    public static int LIBRAW_MOUNT_Fuji_X() {
        return (int) 13L;
    }

    public static int LIBRAW_MOUNT_Hasselblad_H() {
        return (int) 14L;
    }

    public static int LIBRAW_MOUNT_Hasselblad_V() {
        return (int) 15L;
    }

    public static int LIBRAW_MOUNT_Hasselblad_XCD() {
        return (int) 16L;
    }

    public static int LIBRAW_MOUNT_Leica_M() {
        return (int) 17L;
    }

    public static int LIBRAW_MOUNT_Leica_R() {
        return (int) 18L;
    }

    public static int LIBRAW_MOUNT_Leica_S() {
        return (int) 19L;
    }

    public static int LIBRAW_MOUNT_Leica_SL() {
        return (int) 20L;
    }

    public static int LIBRAW_MOUNT_Leica_TL() {
        return (int) 21L;
    }

    public static int LIBRAW_MOUNT_LPS_L() {
        return (int) 22L;
    }

    public static int LIBRAW_MOUNT_Mamiya67() {
        return (int) 23L;
    }

    public static int LIBRAW_MOUNT_Mamiya645() {
        return (int) 24L;
    }

    public static int LIBRAW_MOUNT_Minolta_A() {
        return (int) 25L;
    }

    public static int LIBRAW_MOUNT_Nikon_CX() {
        return (int) 26L;
    }

    public static int LIBRAW_MOUNT_Nikon_F() {
        return (int) 27L;
    }

    public static int LIBRAW_MOUNT_Nikon_Z() {
        return (int) 28L;
    }

    public static int LIBRAW_MOUNT_Pentax_645() {
        return (int) 29L;
    }

    public static int LIBRAW_MOUNT_Pentax_K() {
        return (int) 30L;
    }

    public static int LIBRAW_MOUNT_Pentax_Q() {
        return (int) 31L;
    }

    public static int LIBRAW_MOUNT_RicohModule() {
        return (int) 32L;
    }

    public static int LIBRAW_MOUNT_Rollei_bayonet() {
        return (int) 33L;
    }

    public static int LIBRAW_MOUNT_Samsung_NX_M() {
        return (int) 34L;
    }

    public static int LIBRAW_MOUNT_Samsung_NX() {
        return (int) 35L;
    }

    public static int LIBRAW_MOUNT_Sigma_X3F() {
        return (int) 36L;
    }

    public static int LIBRAW_MOUNT_Sony_E() {
        return (int) 37L;
    }

    public static int LIBRAW_MOUNT_LF() {
        return (int) 38L;
    }

    public static int LIBRAW_MOUNT_DigitalBack() {
        return (int) 39L;
    }

    public static int LIBRAW_MOUNT_FixedLens() {
        return (int) 40L;
    }

    public static int LIBRAW_MOUNT_IL_UM() {
        return (int) 41L;
    }

    public static int LIBRAW_MOUNT_TheLastOne() {
        return (int) 42L;
    }

    public static int LIBRAW_FORMAT_Unknown() {
        return (int) 0L;
    }

    public static int LIBRAW_FORMAT_APSC() {
        return (int) 1L;
    }

    public static int LIBRAW_FORMAT_FF() {
        return (int) 2L;
    }

    public static int LIBRAW_FORMAT_MF() {
        return (int) 3L;
    }

    public static int LIBRAW_FORMAT_APSH() {
        return (int) 4L;
    }

    public static int LIBRAW_FORMAT_1INCH() {
        return (int) 5L;
    }

    public static int LIBRAW_FORMAT_1div2p3INCH() {
        return (int) 6L;
    }

    public static int LIBRAW_FORMAT_1div1p7INCH() {
        return (int) 7L;
    }

    public static int LIBRAW_FORMAT_FT() {
        return (int) 8L;
    }

    public static int LIBRAW_FORMAT_CROP645() {
        return (int) 9L;
    }

    public static int LIBRAW_FORMAT_LeicaS() {
        return (int) 10L;
    }

    public static int LIBRAW_FORMAT_645() {
        return (int) 11L;
    }

    public static int LIBRAW_FORMAT_66() {
        return (int) 12L;
    }

    public static int LIBRAW_FORMAT_69() {
        return (int) 13L;
    }

    public static int LIBRAW_FORMAT_LF() {
        return (int) 14L;
    }

    public static int LIBRAW_FORMAT_Leica_DMR() {
        return (int) 15L;
    }

    public static int LIBRAW_FORMAT_67() {
        return (int) 16L;
    }

    public static int LIBRAW_FORMAT_SigmaAPSC() {
        return (int) 17L;
    }

    public static int LIBRAW_FORMAT_SigmaMerrill() {
        return (int) 18L;
    }

    public static int LIBRAW_FORMAT_SigmaAPSH() {
        return (int) 19L;
    }

    public static int LIBRAW_FORMAT_3648() {
        return (int) 20L;
    }

    public static int LIBRAW_FORMAT_68() {
        return (int) 21L;
    }

    public static int LIBRAW_FORMAT_TheLastOne() {
        return (int) 22L;
    }

    public static int LIBRAW_IMAGE_ASPECT_UNKNOWN() {
        return (int) 0L;
    }

    public static int LIBRAW_IMAGE_ASPECT_3to2() {
        return (int) 1L;
    }

    public static int LIBRAW_IMAGE_ASPECT_1to1() {
        return (int) 2L;
    }

    public static int LIBRAW_IMAGE_ASPECT_4to3() {
        return (int) 3L;
    }

    public static int LIBRAW_IMAGE_ASPECT_16to9() {
        return (int) 4L;
    }

    public static int LIBRAW_IMAGE_ASPECT_5to4() {
        return (int) 5L;
    }

    public static int LIBRAW_IMAGE_ASPECT_OTHER() {
        return (int) 6L;
    }

    public static int LIBRAW_FT_UNDEFINED() {
        return (int) 0L;
    }

    public static int LIBRAW_FT_PRIME_LENS() {
        return (int) 1L;
    }

    public static int LIBRAW_FT_ZOOM_LENS() {
        return (int) 2L;
    }

    public static int LIBRAW_FT_ZOOM_LENS_CONSTANT_APERTURE() {
        return (int) 3L;
    }

    public static int LIBRAW_FT_ZOOM_LENS_VARIABLE_APERTURE() {
        return (int) 4L;
    }

    public static int LIBRAW_Canon_RecordMode_UNDEFINED() {
        return (int) 0L;
    }

    public static int LIBRAW_Canon_RecordMode_JPEG() {
        return (int) 1L;
    }

    public static int LIBRAW_Canon_RecordMode_CRW_THM() {
        return (int) 2L;
    }

    public static int LIBRAW_Canon_RecordMode_AVI_THM() {
        return (int) 3L;
    }

    public static int LIBRAW_Canon_RecordMode_TIF() {
        return (int) 4L;
    }

    public static int LIBRAW_Canon_RecordMode_TIF_JPEG() {
        return (int) 5L;
    }

    public static int LIBRAW_Canon_RecordMode_CR2() {
        return (int) 6L;
    }

    public static int LIBRAW_Canon_RecordMode_CR2_JPEG() {
        return (int) 7L;
    }

    public static int LIBRAW_Canon_RecordMode_UNKNOWN() {
        return (int) 8L;
    }

    public static int LIBRAW_Canon_RecordMode_MOV() {
        return (int) 9L;
    }

    public static int LIBRAW_Canon_RecordMode_MP4() {
        return (int) 10L;
    }

    public static int LIBRAW_Canon_RecordMode_CRM() {
        return (int) 11L;
    }

    public static int LIBRAW_Canon_RecordMode_CR3() {
        return (int) 12L;
    }

    public static int LIBRAW_Canon_RecordMode_CR3_JPEG() {
        return (int) 13L;
    }

    public static int LIBRAW_Canon_RecordMode_HEIF() {
        return (int) 14L;
    }

    public static int LIBRAW_Canon_RecordMode_CR3_HEIF() {
        return (int) 15L;
    }

    public static int LIBRAW_Canon_RecordMode_TheLastOne() {
        return (int) 16L;
    }

    public static int LIBRAW_SONY_DSC() {
        return (int) 1L;
    }

    public static int LIBRAW_SONY_DSLR() {
        return (int) 2L;
    }

    public static int LIBRAW_SONY_NEX() {
        return (int) 3L;
    }

    public static int LIBRAW_SONY_SLT() {
        return (int) 4L;
    }

    public static int LIBRAW_SONY_ILCE() {
        return (int) 5L;
    }

    public static int LIBRAW_SONY_ILCA() {
        return (int) 6L;
    }

    public static int LIBRAW_Kodak_UnknownSensor() {
        return (int) 0L;
    }

    public static int LIBRAW_Kodak_M1() {
        return (int) 1L;
    }

    public static int LIBRAW_Kodak_M15() {
        return (int) 2L;
    }

    public static int LIBRAW_Kodak_M16() {
        return (int) 3L;
    }

    public static int LIBRAW_Kodak_M17() {
        return (int) 4L;
    }

    public static int LIBRAW_Kodak_M2() {
        return (int) 5L;
    }

    public static int LIBRAW_Kodak_M23() {
        return (int) 6L;
    }

    public static int LIBRAW_Kodak_M24() {
        return (int) 7L;
    }

    public static int LIBRAW_Kodak_M3() {
        return (int) 8L;
    }

    public static int LIBRAW_Kodak_M5() {
        return (int) 9L;
    }

    public static int LIBRAW_Kodak_M6() {
        return (int) 10L;
    }

    public static int LIBRAW_Kodak_C14() {
        return (int) 11L;
    }

    public static int LIBRAW_Kodak_X14() {
        return (int) 12L;
    }

    public static int LIBRAW_Kodak_M11() {
        return (int) 13L;
    }

    public static int LIBRAW_HF_Unknown() {
        return (int) 0L;
    }

    public static int LIBRAW_HF_3FR() {
        return (int) 1L;
    }

    public static int LIBRAW_HF_FFF() {
        return (int) 2L;
    }

    public static int LIBRAW_HF_Imacon() {
        return (int) 3L;
    }

    public static int LIBRAW_HF_HasselbladDNG() {
        return (int) 4L;
    }

    public static int LIBRAW_HF_AdobeDNG() {
        return (int) 5L;
    }

    public static int LIBRAW_HF_AdobeDNG_fromPhocusDNG() {
        return (int) 6L;
    }

    public static int LIBRAW_PROCESSING_SONYARW2_NONE() {
        return (int) 0L;
    }

    public static int LIBRAW_PROCESSING_SONYARW2_BASEONLY() {
        return (int) 1L;
    }

    public static int LIBRAW_PROCESSING_SONYARW2_DELTAONLY() {
        return (int) 2L;
    }

    public static int LIBRAW_PROCESSING_SONYARW2_DELTAZEROBASE() {
        return (int) 4L;
    }

    public static int LIBRAW_PROCESSING_SONYARW2_DELTATOVALUE() {
        return (int) 8L;
    }

    public static int LIBRAW_PROCESSING_SONYARW2_ALLFLAGS() {
        return (int) 15L;
    }

    public static int LIBRAW_PROCESSING_DP2Q_INTERPOLATERG() {
        return (int) 16L;
    }

    public static int LIBRAW_PROCESSING_DP2Q_INTERPOLATEAF() {
        return (int) 32L;
    }

    public static int LIBRAW_PROCESSING_PENTAX_PS_ALLFRAMES() {
        return (int) 64L;
    }

    public static int LIBRAW_PROCESSING_CONVERTFLOAT_TO_INT() {
        return (int) 128L;
    }

    public static int LIBRAW_PROCESSING_SRAW_NO_RGB() {
        return (int) 256L;
    }

    public static int LIBRAW_PROCESSING_SRAW_NO_INTERPOLATE() {
        return (int) 512L;
    }

    public static int LIBRAW_PROCESSING_ARQ_SKIP_CHANNEL_SWAP() {
        return (int) 1024L;
    }

    public static int LIBRAW_PROCESSING_NO_ROTATE_FOR_KODAK_THUMBNAILS() {
        return (int) 2048L;
    }

    public static int LIBRAW_PROCESSING_USE_DNG_DEFAULT_CROP() {
        return (int) 4096L;
    }

    public static int LIBRAW_PROCESSING_USE_PPM16_THUMBS() {
        return (int) 8192L;
    }

    public static int LIBRAW_PROCESSING_SKIP_MAKERNOTES() {
        return (int) 16384L;
    }

    public static int LIBRAW_PROCESSING_DONT_CHECK_DNG_ILLUMINANT() {
        return (int) 32768L;
    }

    public static int LIBRAW_PROCESSING_DNGSDK_ZEROCOPY() {
        return (int) 65536L;
    }

    public static int LIBRAW_PROCESSING_ZEROFILTERS_FOR_MONOCHROMETIFFS() {
        return (int) 131072L;
    }

    public static int LIBRAW_PROCESSING_DNG_ADD_ENHANCED() {
        return (int) 262144L;
    }

    public static int LIBRAW_PROCESSING_DNG_ADD_PREVIEWS() {
        return (int) 524288L;
    }

    public static int LIBRAW_PROCESSING_DNG_PREFER_LARGEST_IMAGE() {
        return (int) 1048576L;
    }

    public static int LIBRAW_PROCESSING_DNG_STAGE2() {
        return (int) 2097152L;
    }

    public static int LIBRAW_PROCESSING_DNG_STAGE3() {
        return (int) 4194304L;
    }

    public static int LIBRAW_PROCESSING_DNG_ALLOWSIZECHANGE() {
        return (int) 8388608L;
    }

    public static int LIBRAW_PROCESSING_DNG_DISABLEWBADJUST() {
        return (int) 16777216L;
    }

    public static int LIBRAW_PROCESSING_PROVIDE_NONSTANDARD_WB() {
        return (int) 33554432L;
    }

    public static int LIBRAW_PROCESSING_CAMERAWB_FALLBACK_TO_DAYLIGHT() {
        return (int) 67108864L;
    }

    public static int LIBRAW_DECODER_HASCURVE() {
        return (int) 16L;
    }

    public static int LIBRAW_DECODER_SONYARW2() {
        return (int) 32L;
    }

    public static int LIBRAW_DECODER_TRYRAWSPEED() {
        return (int) 64L;
    }

    public static int LIBRAW_DECODER_OWNALLOC() {
        return (int) 128L;
    }

    public static int LIBRAW_DECODER_FIXEDMAXC() {
        return (int) 256L;
    }

    public static int LIBRAW_DECODER_ADOBECOPYPIXEL() {
        return (int) 512L;
    }

    public static int LIBRAW_DECODER_LEGACY_WITH_MARGINS() {
        return (int) 1024L;
    }

    public static int LIBRAW_DECODER_3CHANNEL() {
        return (int) 2048L;
    }

    public static int LIBRAW_DECODER_SINAR4SHOT() {
        return (int) 2048L;
    }

    public static int LIBRAW_DECODER_FLATDATA() {
        return (int) 4096L;
    }

    public static int LIBRAW_DECODER_FLAT_BG2_SWAPPED() {
        return (int) 8192L;
    }

    public static int LIBRAW_DECODER_NOTSET() {
        return (int) 32768L;
    }

    public static int LIBRAW_OPTIONS_NONE() {
        return (int) 0L;
    }

    public static int LIBRAW_OPIONS_NO_MEMERR_CALLBACK() {
        return (int) 1L;
    }

    public static int LIBRAW_OPIONS_NO_DATAERR_CALLBACK() {
        return (int) 2L;
    }

    public static int LIBRAW_WARN_NONE() {
        return (int) 0L;
    }

    public static int LIBRAW_WARN_BAD_CAMERA_WB() {
        return (int) 4L;
    }

    public static int LIBRAW_WARN_NO_METADATA() {
        return (int) 8L;
    }

    public static int LIBRAW_WARN_NO_JPEGLIB() {
        return (int) 16L;
    }

    public static int LIBRAW_WARN_NO_EMBEDDED_PROFILE() {
        return (int) 32L;
    }

    public static int LIBRAW_WARN_NO_INPUT_PROFILE() {
        return (int) 64L;
    }

    public static int LIBRAW_WARN_BAD_OUTPUT_PROFILE() {
        return (int) 128L;
    }

    public static int LIBRAW_WARN_NO_BADPIXELMAP() {
        return (int) 256L;
    }

    public static int LIBRAW_WARN_BAD_DARKFRAME_FILE() {
        return (int) 512L;
    }

    public static int LIBRAW_WARN_BAD_DARKFRAME_DIM() {
        return (int) 1024L;
    }

    public static int LIBRAW_WARN_NO_JASPER() {
        return (int) 2048L;
    }

    public static int LIBRAW_WARN_RAWSPEED_PROBLEM() {
        return (int) 4096L;
    }

    public static int LIBRAW_WARN_RAWSPEED_UNSUPPORTED() {
        return (int) 8192L;
    }

    public static int LIBRAW_WARN_RAWSPEED_PROCESSED() {
        return (int) 16384L;
    }

    public static int LIBRAW_WARN_FALLBACK_TO_AHD() {
        return (int) 32768L;
    }

    public static int LIBRAW_WARN_PARSEFUJI_PROCESSED() {
        return (int) 65536L;
    }

    public static int LIBRAW_WARN_DNGSDK_PROCESSED() {
        return (int) 131072L;
    }

    public static int LIBRAW_WARN_DNG_IMAGES_REORDERED() {
        return (int) 262144L;
    }

    public static int LIBRAW_WARN_DNG_STAGE2_APPLIED() {
        return (int) 524288L;
    }

    public static int LIBRAW_WARN_DNG_STAGE3_APPLIED() {
        return (int) 1048576L;
    }

    public static int LIBRAW_EXCEPTION_NONE() {
        return (int) 0L;
    }

    public static int LIBRAW_EXCEPTION_ALLOC() {
        return (int) 1L;
    }

    public static int LIBRAW_EXCEPTION_DECODE_RAW() {
        return (int) 2L;
    }

    public static int LIBRAW_EXCEPTION_DECODE_JPEG() {
        return (int) 3L;
    }

    public static int LIBRAW_EXCEPTION_IO_EOF() {
        return (int) 4L;
    }

    public static int LIBRAW_EXCEPTION_IO_CORRUPT() {
        return (int) 5L;
    }

    public static int LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK() {
        return (int) 6L;
    }

    public static int LIBRAW_EXCEPTION_BAD_CROP() {
        return (int) 7L;
    }

    public static int LIBRAW_EXCEPTION_IO_BADFILE() {
        return (int) 8L;
    }

    public static int LIBRAW_EXCEPTION_DECODE_JPEG2000() {
        return (int) 9L;
    }

    public static int LIBRAW_EXCEPTION_TOOBIG() {
        return (int) 10L;
    }

    public static int LIBRAW_EXCEPTION_MEMPOOL() {
        return (int) 11L;
    }

    public static int LIBRAW_PROGRESS_START() {
        return (int) 0L;
    }

    public static int LIBRAW_PROGRESS_OPEN() {
        return (int) 1L;
    }

    public static int LIBRAW_PROGRESS_IDENTIFY() {
        return (int) 2L;
    }

    public static int LIBRAW_PROGRESS_SIZE_ADJUST() {
        return (int) 4L;
    }

    public static int LIBRAW_PROGRESS_LOAD_RAW() {
        return (int) 8L;
    }

    public static int LIBRAW_PROGRESS_RAW2_IMAGE() {
        return (int) 16L;
    }

    public static int LIBRAW_PROGRESS_REMOVE_ZEROES() {
        return (int) 32L;
    }

    public static int LIBRAW_PROGRESS_BAD_PIXELS() {
        return (int) 64L;
    }

    public static int LIBRAW_PROGRESS_DARK_FRAME() {
        return (int) 128L;
    }

    public static int LIBRAW_PROGRESS_FOVEON_INTERPOLATE() {
        return (int) 256L;
    }

    public static int LIBRAW_PROGRESS_SCALE_COLORS() {
        return (int) 512L;
    }

    public static int LIBRAW_PROGRESS_PRE_INTERPOLATE() {
        return (int) 1024L;
    }

    public static int LIBRAW_PROGRESS_INTERPOLATE() {
        return (int) 2048L;
    }

    public static int LIBRAW_PROGRESS_MIX_GREEN() {
        return (int) 4096L;
    }

    public static int LIBRAW_PROGRESS_MEDIAN_FILTER() {
        return (int) 8192L;
    }

    public static int LIBRAW_PROGRESS_HIGHLIGHTS() {
        return (int) 16384L;
    }

    public static int LIBRAW_PROGRESS_FUJI_ROTATE() {
        return (int) 32768L;
    }

    public static int LIBRAW_PROGRESS_FLIP() {
        return (int) 65536L;
    }

    public static int LIBRAW_PROGRESS_APPLY_PROFILE() {
        return (int) 131072L;
    }

    public static int LIBRAW_PROGRESS_CONVERT_RGB() {
        return (int) 262144L;
    }

    public static int LIBRAW_PROGRESS_STRETCH() {
        return (int) 524288L;
    }

    public static int LIBRAW_PROGRESS_STAGE20() {
        return (int) 1048576L;
    }

    public static int LIBRAW_PROGRESS_STAGE21() {
        return (int) 2097152L;
    }

    public static int LIBRAW_PROGRESS_STAGE22() {
        return (int) 4194304L;
    }

    public static int LIBRAW_PROGRESS_STAGE23() {
        return (int) 8388608L;
    }

    public static int LIBRAW_PROGRESS_STAGE24() {
        return (int) 16777216L;
    }

    public static int LIBRAW_PROGRESS_STAGE25() {
        return (int) 33554432L;
    }

    public static int LIBRAW_PROGRESS_STAGE26() {
        return (int) 67108864L;
    }

    public static int LIBRAW_PROGRESS_STAGE27() {
        return (int) 134217728L;
    }

    public static int LIBRAW_PROGRESS_THUMB_LOAD() {
        return (int) 268435456L;
    }

    public static int LIBRAW_PROGRESS_TRESERVED1() {
        return (int) 536870912L;
    }

    public static int LIBRAW_PROGRESS_TRESERVED2() {
        return (int) 1073741824L;
    }

    public static int LIBRAW_SUCCESS() {
        return (int) 0L;
    }

    public static int LIBRAW_UNSPECIFIED_ERROR() {
        return (int) -1L;
    }

    public static int LIBRAW_FILE_UNSUPPORTED() {
        return (int) -2L;
    }

    public static int LIBRAW_REQUEST_FOR_NONEXISTENT_IMAGE() {
        return (int) -3L;
    }

    public static int LIBRAW_OUT_OF_ORDER_CALL() {
        return (int) -4L;
    }

    public static int LIBRAW_NO_THUMBNAIL() {
        return (int) -5L;
    }

    public static int LIBRAW_UNSUPPORTED_THUMBNAIL() {
        return (int) -6L;
    }

    public static int LIBRAW_INPUT_CLOSED() {
        return (int) -7L;
    }

    public static int LIBRAW_NOT_IMPLEMENTED() {
        return (int) -8L;
    }

    public static int LIBRAW_UNSUFFICIENT_MEMORY() {
        return (int) -100007L;
    }

    public static int LIBRAW_DATA_ERROR() {
        return (int) -100008L;
    }

    public static int LIBRAW_IO_ERROR() {
        return (int) -100009L;
    }

    public static int LIBRAW_CANCELLED_BY_CALLBACK() {
        return (int) -100010L;
    }

    public static int LIBRAW_BAD_CROP() {
        return (int) -100011L;
    }

    public static int LIBRAW_TOO_BIG() {
        return (int) -100012L;
    }

    public static int LIBRAW_MEMPOOL_OVERFLOW() {
        return (int) -100013L;
    }

    public static int LIBRAW_THUMBNAIL_UNKNOWN() {
        return (int) 0L;
    }

    public static int LIBRAW_THUMBNAIL_JPEG() {
        return (int) 1L;
    }

    public static int LIBRAW_THUMBNAIL_BITMAP() {
        return (int) 2L;
    }

    public static int LIBRAW_THUMBNAIL_BITMAP16() {
        return (int) 3L;
    }

    public static int LIBRAW_THUMBNAIL_LAYER() {
        return (int) 4L;
    }

    public static int LIBRAW_THUMBNAIL_ROLLEI() {
        return (int) 5L;
    }

    public static int LIBRAW_IMAGE_JPEG() {
        return (int) 1L;
    }

    public static int LIBRAW_IMAGE_BITMAP() {
        return (int) 2L;
    }

    public static MethodHandle default_memory_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$92.default_memory_callback$MH, "default_memory_callback");
    }

    public static void default_memory_callback(Addressable data, Addressable file, Addressable where) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.default_memory_callback$MH, "default_memory_callback");
        try {
            mh$.invokeExact(data.address(), file.address(), where.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle default_data_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$92.default_data_callback$MH, "default_data_callback");
    }

    public static void default_data_callback(Addressable data, Addressable file, int offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.default_data_callback$MH, "default_data_callback");
        try {
            mh$.invokeExact(data.address(), file.address(), offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$94.libraw_strerror$MH, "libraw_strerror");
    }

    public static MemoryAddress libraw_strerror(int errorcode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.libraw_strerror$MH, "libraw_strerror");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(errorcode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_strprogress$MH() {
        return RuntimeHelper.requireNonNull(constants$94.libraw_strprogress$MH, "libraw_strprogress");
    }

    public static MemoryAddress libraw_strprogress(int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.libraw_strprogress$MH, "libraw_strprogress");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_init$MH() {
        return RuntimeHelper.requireNonNull(constants$94.libraw_init$MH, "libraw_init");
    }

    public static MemoryAddress libraw_init(int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.libraw_init$MH, "libraw_init");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_open_file$MH() {
        return RuntimeHelper.requireNonNull(constants$94.libraw_open_file$MH, "libraw_open_file");
    }

    public static int libraw_open_file(Addressable x0, Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.libraw_open_file$MH, "libraw_open_file");
        try {
            return (int) mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_open_file_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$95.libraw_open_file_ex$MH, "libraw_open_file_ex");
    }

    public static int libraw_open_file_ex(Addressable x0, Addressable x1, long max_buff_sz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.libraw_open_file_ex$MH, "libraw_open_file_ex");
        try {
            return (int) mh$.invokeExact(x0.address(), x1.address(), max_buff_sz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_open_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$95.libraw_open_buffer$MH, "libraw_open_buffer");
    }

    public static int libraw_open_buffer(Addressable x0, Addressable buffer, long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.libraw_open_buffer$MH, "libraw_open_buffer");
        try {
            return (int) mh$.invokeExact(x0.address(), buffer.address(), size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_unpack$MH() {
        return RuntimeHelper.requireNonNull(constants$95.libraw_unpack$MH, "libraw_unpack");
    }

    public static int libraw_unpack(Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.libraw_unpack$MH, "libraw_unpack");
        try {
            return (int) mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_unpack_thumb$MH() {
        return RuntimeHelper.requireNonNull(constants$95.libraw_unpack_thumb$MH, "libraw_unpack_thumb");
    }

    public static int libraw_unpack_thumb(Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.libraw_unpack_thumb$MH, "libraw_unpack_thumb");
        try {
            return (int) mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_recycle_datastream$MH() {
        return RuntimeHelper.requireNonNull(constants$95.libraw_recycle_datastream$MH, "libraw_recycle_datastream");
    }

    public static void libraw_recycle_datastream(Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.libraw_recycle_datastream$MH, "libraw_recycle_datastream");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_recycle$MH() {
        return RuntimeHelper.requireNonNull(constants$95.libraw_recycle$MH, "libraw_recycle");
    }

    public static void libraw_recycle(Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.libraw_recycle$MH, "libraw_recycle");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_close$MH() {
        return RuntimeHelper.requireNonNull(constants$96.libraw_close$MH, "libraw_close");
    }

    public static void libraw_close(Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.libraw_close$MH, "libraw_close");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_subtract_black$MH() {
        return RuntimeHelper.requireNonNull(constants$96.libraw_subtract_black$MH, "libraw_subtract_black");
    }

    public static void libraw_subtract_black(Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.libraw_subtract_black$MH, "libraw_subtract_black");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_raw2image$MH() {
        return RuntimeHelper.requireNonNull(constants$96.libraw_raw2image$MH, "libraw_raw2image");
    }

    public static int libraw_raw2image(Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.libraw_raw2image$MH, "libraw_raw2image");
        try {
            return (int) mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_free_image$MH() {
        return RuntimeHelper.requireNonNull(constants$96.libraw_free_image$MH, "libraw_free_image");
    }

    public static void libraw_free_image(Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.libraw_free_image$MH, "libraw_free_image");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_version$MH() {
        return RuntimeHelper.requireNonNull(constants$96.libraw_version$MH, "libraw_version");
    }

    public static MemoryAddress libraw_version(Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.libraw_version$MH, "libraw_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_versionNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$96.libraw_versionNumber$MH, "libraw_versionNumber");
    }

    public static int libraw_versionNumber(Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.libraw_versionNumber$MH, "libraw_versionNumber");
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_cameraList$MH() {
        return RuntimeHelper.requireNonNull(constants$97.libraw_cameraList$MH, "libraw_cameraList");
    }

    public static MemoryAddress libraw_cameraList(Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.libraw_cameraList$MH, "libraw_cameraList");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_cameraCount$MH() {
        return RuntimeHelper.requireNonNull(constants$97.libraw_cameraCount$MH, "libraw_cameraCount");
    }

    public static int libraw_cameraCount(Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.libraw_cameraCount$MH, "libraw_cameraCount");
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_memerror_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$97.libraw_set_memerror_handler$MH, "libraw_set_memerror_handler");
    }

    public static void libraw_set_memerror_handler(Addressable x0, Addressable cb, Addressable datap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.libraw_set_memerror_handler$MH, "libraw_set_memerror_handler");
        try {
            mh$.invokeExact(x0.address(), cb.address(), datap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_exifparser_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$97.libraw_set_exifparser_handler$MH, "libraw_set_exifparser_handler");
    }

    public static void libraw_set_exifparser_handler(Addressable x0, Addressable cb, Addressable datap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.libraw_set_exifparser_handler$MH, "libraw_set_exifparser_handler");
        try {
            mh$.invokeExact(x0.address(), cb.address(), datap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_dataerror_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$97.libraw_set_dataerror_handler$MH, "libraw_set_dataerror_handler");
    }

    public static void libraw_set_dataerror_handler(Addressable x0, Addressable func, Addressable datap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.libraw_set_dataerror_handler$MH, "libraw_set_dataerror_handler");
        try {
            mh$.invokeExact(x0.address(), func.address(), datap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_progress_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$97.libraw_set_progress_handler$MH, "libraw_set_progress_handler");
    }

    public static void libraw_set_progress_handler(Addressable x0, Addressable cb, Addressable datap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.libraw_set_progress_handler$MH, "libraw_set_progress_handler");
        try {
            mh$.invokeExact(x0.address(), cb.address(), datap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_unpack_function_name$MH() {
        return RuntimeHelper.requireNonNull(constants$98.libraw_unpack_function_name$MH, "libraw_unpack_function_name");
    }

    public static MemoryAddress libraw_unpack_function_name(Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.libraw_unpack_function_name$MH, "libraw_unpack_function_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_get_decoder_info$MH() {
        return RuntimeHelper.requireNonNull(constants$98.libraw_get_decoder_info$MH, "libraw_get_decoder_info");
    }

    public static int libraw_get_decoder_info(Addressable lr, Addressable d) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.libraw_get_decoder_info$MH, "libraw_get_decoder_info");
        try {
            return (int) mh$.invokeExact(lr.address(), d.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_COLOR$MH() {
        return RuntimeHelper.requireNonNull(constants$98.libraw_COLOR$MH, "libraw_COLOR");
    }

    public static int libraw_COLOR(Addressable x0, int row, int col) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.libraw_COLOR$MH, "libraw_COLOR");
        try {
            return (int) mh$.invokeExact(x0.address(), row, col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_capabilities$MH() {
        return RuntimeHelper.requireNonNull(constants$98.libraw_capabilities$MH, "libraw_capabilities");
    }

    public static int libraw_capabilities(Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.libraw_capabilities$MH, "libraw_capabilities");
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_adjust_sizes_info_only$MH() {
        return RuntimeHelper.requireNonNull(constants$98.libraw_adjust_sizes_info_only$MH, "libraw_adjust_sizes_info_only");
    }

    public static int libraw_adjust_sizes_info_only(Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.libraw_adjust_sizes_info_only$MH, "libraw_adjust_sizes_info_only");
        try {
            return (int) mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_dcraw_ppm_tiff_writer$MH() {
        return RuntimeHelper.requireNonNull(constants$98.libraw_dcraw_ppm_tiff_writer$MH, "libraw_dcraw_ppm_tiff_writer");
    }

    public static int libraw_dcraw_ppm_tiff_writer(Addressable lr, Addressable filename) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.libraw_dcraw_ppm_tiff_writer$MH, "libraw_dcraw_ppm_tiff_writer");
        try {
            return (int) mh$.invokeExact(lr.address(), filename.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_dcraw_thumb_writer$MH() {
        return RuntimeHelper.requireNonNull(constants$99.libraw_dcraw_thumb_writer$MH, "libraw_dcraw_thumb_writer");
    }

    public static int libraw_dcraw_thumb_writer(Addressable lr, Addressable fname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.libraw_dcraw_thumb_writer$MH, "libraw_dcraw_thumb_writer");
        try {
            return (int) mh$.invokeExact(lr.address(), fname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_dcraw_process$MH() {
        return RuntimeHelper.requireNonNull(constants$99.libraw_dcraw_process$MH, "libraw_dcraw_process");
    }

    public static int libraw_dcraw_process(Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.libraw_dcraw_process$MH, "libraw_dcraw_process");
        try {
            return (int) mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_dcraw_make_mem_image$MH() {
        return RuntimeHelper.requireNonNull(constants$99.libraw_dcraw_make_mem_image$MH, "libraw_dcraw_make_mem_image");
    }

    public static MemoryAddress libraw_dcraw_make_mem_image(Addressable lr, Addressable errc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.libraw_dcraw_make_mem_image$MH, "libraw_dcraw_make_mem_image");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(lr.address(), errc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_dcraw_make_mem_thumb$MH() {
        return RuntimeHelper.requireNonNull(constants$99.libraw_dcraw_make_mem_thumb$MH, "libraw_dcraw_make_mem_thumb");
    }

    public static MemoryAddress libraw_dcraw_make_mem_thumb(Addressable lr, Addressable errc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.libraw_dcraw_make_mem_thumb$MH, "libraw_dcraw_make_mem_thumb");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(lr.address(), errc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_dcraw_clear_mem$MH() {
        return RuntimeHelper.requireNonNull(constants$99.libraw_dcraw_clear_mem$MH, "libraw_dcraw_clear_mem");
    }

    public static void libraw_dcraw_clear_mem(Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.libraw_dcraw_clear_mem$MH, "libraw_dcraw_clear_mem");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_demosaic$MH() {
        return RuntimeHelper.requireNonNull(constants$99.libraw_set_demosaic$MH, "libraw_set_demosaic");
    }

    public static void libraw_set_demosaic(Addressable lr, int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.libraw_set_demosaic$MH, "libraw_set_demosaic");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_output_color$MH() {
        return RuntimeHelper.requireNonNull(constants$100.libraw_set_output_color$MH, "libraw_set_output_color");
    }

    public static void libraw_set_output_color(Addressable lr, int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.libraw_set_output_color$MH, "libraw_set_output_color");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_user_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$100.libraw_set_user_mul$MH, "libraw_set_user_mul");
    }

    public static void libraw_set_user_mul(Addressable lr, int index, float val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.libraw_set_user_mul$MH, "libraw_set_user_mul");
        try {
            mh$.invokeExact(lr.address(), index, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_output_bps$MH() {
        return RuntimeHelper.requireNonNull(constants$100.libraw_set_output_bps$MH, "libraw_set_output_bps");
    }

    public static void libraw_set_output_bps(Addressable lr, int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.libraw_set_output_bps$MH, "libraw_set_output_bps");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$100.libraw_set_gamma$MH, "libraw_set_gamma");
    }

    public static void libraw_set_gamma(Addressable lr, int index, float value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.libraw_set_gamma$MH, "libraw_set_gamma");
        try {
            mh$.invokeExact(lr.address(), index, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_no_auto_bright$MH() {
        return RuntimeHelper.requireNonNull(constants$100.libraw_set_no_auto_bright$MH, "libraw_set_no_auto_bright");
    }

    public static void libraw_set_no_auto_bright(Addressable lr, int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.libraw_set_no_auto_bright$MH, "libraw_set_no_auto_bright");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_bright$MH() {
        return RuntimeHelper.requireNonNull(constants$100.libraw_set_bright$MH, "libraw_set_bright");
    }

    public static void libraw_set_bright(Addressable lr, float value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.libraw_set_bright$MH, "libraw_set_bright");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_highlight$MH() {
        return RuntimeHelper.requireNonNull(constants$101.libraw_set_highlight$MH, "libraw_set_highlight");
    }

    public static void libraw_set_highlight(Addressable lr, int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.libraw_set_highlight$MH, "libraw_set_highlight");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_fbdd_noiserd$MH() {
        return RuntimeHelper.requireNonNull(constants$101.libraw_set_fbdd_noiserd$MH, "libraw_set_fbdd_noiserd");
    }

    public static void libraw_set_fbdd_noiserd(Addressable lr, int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.libraw_set_fbdd_noiserd$MH, "libraw_set_fbdd_noiserd");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_get_raw_height$MH() {
        return RuntimeHelper.requireNonNull(constants$101.libraw_get_raw_height$MH, "libraw_get_raw_height");
    }

    public static int libraw_get_raw_height(Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.libraw_get_raw_height$MH, "libraw_get_raw_height");
        try {
            return (int) mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_get_raw_width$MH() {
        return RuntimeHelper.requireNonNull(constants$101.libraw_get_raw_width$MH, "libraw_get_raw_width");
    }

    public static int libraw_get_raw_width(Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.libraw_get_raw_width$MH, "libraw_get_raw_width");
        try {
            return (int) mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_get_iheight$MH() {
        return RuntimeHelper.requireNonNull(constants$101.libraw_get_iheight$MH, "libraw_get_iheight");
    }

    public static int libraw_get_iheight(Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.libraw_get_iheight$MH, "libraw_get_iheight");
        try {
            return (int) mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_get_iwidth$MH() {
        return RuntimeHelper.requireNonNull(constants$101.libraw_get_iwidth$MH, "libraw_get_iwidth");
    }

    public static int libraw_get_iwidth(Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.libraw_get_iwidth$MH, "libraw_get_iwidth");
        try {
            return (int) mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_get_cam_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$102.libraw_get_cam_mul$MH, "libraw_get_cam_mul");
    }

    public static float libraw_get_cam_mul(Addressable lr, int index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.libraw_get_cam_mul$MH, "libraw_get_cam_mul");
        try {
            return (float) mh$.invokeExact(lr.address(), index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_get_pre_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$102.libraw_get_pre_mul$MH, "libraw_get_pre_mul");
    }

    public static float libraw_get_pre_mul(Addressable lr, int index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.libraw_get_pre_mul$MH, "libraw_get_pre_mul");
        try {
            return (float) mh$.invokeExact(lr.address(), index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_get_rgb_cam$MH() {
        return RuntimeHelper.requireNonNull(constants$102.libraw_get_rgb_cam$MH, "libraw_get_rgb_cam");
    }

    public static float libraw_get_rgb_cam(Addressable lr, int index1, int index2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.libraw_get_rgb_cam$MH, "libraw_get_rgb_cam");
        try {
            return (float) mh$.invokeExact(lr.address(), index1, index2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_get_color_maximum$MH() {
        return RuntimeHelper.requireNonNull(constants$102.libraw_get_color_maximum$MH, "libraw_get_color_maximum");
    }

    public static int libraw_get_color_maximum(Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.libraw_get_color_maximum$MH, "libraw_get_color_maximum");
        try {
            return (int) mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_set_output_tif$MH() {
        return RuntimeHelper.requireNonNull(constants$102.libraw_set_output_tif$MH, "libraw_set_output_tif");
    }

    public static void libraw_set_output_tif(Addressable lr, int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.libraw_set_output_tif$MH, "libraw_set_output_tif");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_get_iparams$MH() {
        return RuntimeHelper.requireNonNull(constants$102.libraw_get_iparams$MH, "libraw_get_iparams");
    }

    public static MemoryAddress libraw_get_iparams(Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.libraw_get_iparams$MH, "libraw_get_iparams");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_get_lensinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$103.libraw_get_lensinfo$MH, "libraw_get_lensinfo");
    }

    public static MemoryAddress libraw_get_lensinfo(Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.libraw_get_lensinfo$MH, "libraw_get_lensinfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle libraw_get_imgother$MH() {
        return RuntimeHelper.requireNonNull(constants$103.libraw_get_imgother$MH, "libraw_get_imgother");
    }

    public static MemoryAddress libraw_get_imgother(Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.libraw_get_imgother$MH, "libraw_get_imgother");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static long LIBRAW_USE_STREAMS_DATASTREAM_MAXSIZE() {
        return 262144000L;
    }

    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }

    public static long __STDC_ISO_10646__() {
        return 201706L;
    }

    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }

    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }

    public static long ULLONG_MAX() {
        return -1L;
    }

    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return (int) 4L;
    }

    public static int SEM_VALUE_MAX() {
        return (int) 2147483647L;
    }

    public static long SSIZE_MAX() {
        return 9223372036854775807L;
    }

    public static int BC_BASE_MAX() {
        return (int) 99L;
    }

    public static int BC_DIM_MAX() {
        return (int) 2048L;
    }

    public static int BC_SCALE_MAX() {
        return (int) 99L;
    }

    public static int BC_STRING_MAX() {
        return (int) 1000L;
    }

    public static int EXPR_NEST_MAX() {
        return (int) 32L;
    }

    public static int LINE_MAX() {
        return (int) 2048L;
    }

    public static int RE_DUP_MAX() {
        return (int) 32767L;
    }

    public static int SCHAR_MAX() {
        return (int) 127L;
    }

    public static int SHRT_MAX() {
        return (int) 32767L;
    }

    public static int INT_MAX() {
        return (int) 2147483647L;
    }

    public static long LONG_MAX() {
        return 9223372036854775807L;
    }

    public static int SCHAR_MIN() {
        return (int) -128L;
    }

    public static int SHRT_MIN() {
        return (int) -32768L;
    }

    public static int INT_MIN() {
        return (int) -2147483648L;
    }

    public static long LONG_MIN() {
        return -9223372036854775808L;
    }

    public static int UCHAR_MAX() {
        return (int) 255L;
    }

    public static int USHRT_MAX() {
        return (int) 65535L;
    }

    public static int UINT_MAX() {
        return (int) 4294967295L;
    }

    public static long ULONG_MAX() {
        return -1L;
    }

    public static int CHAR_BIT() {
        return (int) 8L;
    }

    public static int CHAR_MIN() {
        return (int) -128L;
    }

    public static int CHAR_MAX() {
        return (int) 127L;
    }

    public static MemoryAddress NULL() {
        return constants$103.NULL$ADDR;
    }

    public static int __TIMESIZE() {
        return (int) 64L;
    }

    public static int EOF() {
        return (int) -1L;
    }

    public static MemorySegment P_tmpdir() {
        return constants$103.P_tmpdir$SEGMENT;
    }

    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int) 0L;
    }

    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int) 0L;
    }

    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int) 0L;
    }

    public static int __WCLONE() {
        return (int) 2147483648L;
    }

    public static int __BYTE_ORDER() {
        return (int) 1234L;
    }

    public static int __FLOAT_WORD_ORDER() {
        return (int) 1234L;
    }

    public static int LITTLE_ENDIAN() {
        return (int) 1234L;
    }

    public static int BIG_ENDIAN() {
        return (int) 4321L;
    }

    public static int PDP_ENDIAN() {
        return (int) 3412L;
    }

    public static int BYTE_ORDER() {
        return (int) 1234L;
    }

    public static long _SIGSET_NWORDS() {
        return 16L;
    }

    public static int __NFDBITS() {
        return (int) 64L;
    }

    public static int FD_SETSIZE() {
        return (int) 1024L;
    }

    public static int NFDBITS() {
        return (int) 64L;
    }

    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int) 0L;
    }

    public static double HUGE_VAL() {
        return Double.valueOf("Infinity");
    }

    public static float HUGE_VALF() {
        return Float.valueOf("Infinity");
    }

    public static double HUGE_VALL() {
        return Double.valueOf("Infinity");
    }

    public static float INFINITY() {
        return Float.valueOf("Infinity");
    }

    public static float NAN() {
        return Float.valueOf("NaN");
    }

    public static int __GLIBC_FLT_EVAL_METHOD() {
        return (int) 0L;
    }

    public static int FP_ILOGB0() {
        return (int) -2147483648L;
    }

    public static int FP_ILOGBNAN() {
        return (int) -2147483648L;
    }

    public static int math_errhandling() {
        return (int) 3L;
    }

    public static double M_E() {
        return 2.718281828459045d;
    }

    public static double M_LOG2E() {
        return 1.4426950408889634d;
    }

    public static double M_LOG10E() {
        return 0.4342944819032518d;
    }

    public static double M_LN2() {
        return 0.6931471805599453d;
    }

    public static double M_LN10() {
        return 2.302585092994046d;
    }

    public static double M_PI() {
        return 3.141592653589793d;
    }

    public static double M_PI_2() {
        return 1.5707963267948966d;
    }

    public static double M_PI_4() {
        return 0.7853981633974483d;
    }

    public static double M_1_PI() {
        return 0.3183098861837907d;
    }

    public static double M_2_PI() {
        return 0.6366197723675814d;
    }

    public static double M_2_SQRTPI() {
        return 1.1283791670955126d;
    }

    public static double M_SQRT2() {
        return 1.4142135623730951d;
    }

    public static double M_SQRT1_2() {
        return 0.7071067811865476d;
    }

    public static int EWOULDBLOCK() {
        return (int) 11L;
    }

    public static int EDEADLOCK() {
        return (int) 35L;
    }

    public static int ENOTSUP() {
        return (int) 95L;
    }

    public static int __WCHAR_MAX() {
        return (int) 2147483647L;
    }

    public static int __WCHAR_MIN() {
        return (int) -2147483648L;
    }

    public static int INT8_MIN() {
        return (int) -128L;
    }

    public static int INT16_MIN() {
        return (int) -32768L;
    }

    public static int INT32_MIN() {
        return (int) -2147483648L;
    }

    public static long INT64_MIN() {
        return -9223372036854775808L;
    }

    public static int INT8_MAX() {
        return (int) 127L;
    }

    public static int INT16_MAX() {
        return (int) 32767L;
    }

    public static int INT32_MAX() {
        return (int) 2147483647L;
    }

    public static long INT64_MAX() {
        return 9223372036854775807L;
    }

    public static int UINT8_MAX() {
        return (int) 255L;
    }

    public static int UINT16_MAX() {
        return (int) 65535L;
    }

    public static int UINT32_MAX() {
        return (int) 4294967295L;
    }

    public static long UINT64_MAX() {
        return -1L;
    }

    public static int INT_LEAST8_MIN() {
        return (int) -128L;
    }

    public static int INT_LEAST16_MIN() {
        return (int) -32768L;
    }

    public static int INT_LEAST32_MIN() {
        return (int) -2147483648L;
    }

    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }

    public static int INT_LEAST8_MAX() {
        return (int) 127L;
    }

    public static int INT_LEAST16_MAX() {
        return (int) 32767L;
    }

    public static int INT_LEAST32_MAX() {
        return (int) 2147483647L;
    }

    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }

    public static int UINT_LEAST8_MAX() {
        return (int) 255L;
    }

    public static int UINT_LEAST16_MAX() {
        return (int) 65535L;
    }

    public static int UINT_LEAST32_MAX() {
        return (int) 4294967295L;
    }

    public static long UINT_LEAST64_MAX() {
        return -1L;
    }

    public static int INT_FAST8_MIN() {
        return (int) -128L;
    }

    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }

    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }

    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }

    public static int INT_FAST8_MAX() {
        return (int) 127L;
    }

    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }

    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }

    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }

    public static int UINT_FAST8_MAX() {
        return (int) 255L;
    }

    public static long UINT_FAST16_MAX() {
        return -1L;
    }

    public static long UINT_FAST32_MAX() {
        return -1L;
    }

    public static long UINT_FAST64_MAX() {
        return -1L;
    }

    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }

    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }

    public static long UINTPTR_MAX() {
        return -1L;
    }

    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }

    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }

    public static long UINTMAX_MAX() {
        return -1L;
    }

    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }

    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }

    public static int SIG_ATOMIC_MIN() {
        return (int) -2147483648L;
    }

    public static int SIG_ATOMIC_MAX() {
        return (int) 2147483647L;
    }

    public static long SIZE_MAX() {
        return -1L;
    }

    public static int WCHAR_MIN() {
        return (int) -2147483648L;
    }

    public static int WCHAR_MAX() {
        return (int) 2147483647L;
    }

    public static int WINT_MIN() {
        return (int) 0L;
    }

    public static int WINT_MAX() {
        return (int) 4294967295L;
    }

    public static MemorySegment __PRI64_PREFIX() {
        return constants$103.__PRI64_PREFIX$SEGMENT;
    }

    public static MemorySegment __PRIPTR_PREFIX() {
        return constants$103.__PRIPTR_PREFIX$SEGMENT;
    }

    public static MemorySegment PRId8() {
        return constants$104.PRId8$SEGMENT;
    }

    public static MemorySegment PRId16() {
        return constants$104.PRId16$SEGMENT;
    }

    public static MemorySegment PRId32() {
        return constants$104.PRId32$SEGMENT;
    }

    public static MemorySegment PRId64() {
        return constants$104.PRId64$SEGMENT;
    }

    public static MemorySegment PRIdLEAST8() {
        return constants$104.PRIdLEAST8$SEGMENT;
    }

    public static MemorySegment PRIdLEAST16() {
        return constants$104.PRIdLEAST16$SEGMENT;
    }

    public static MemorySegment PRIdLEAST32() {
        return constants$105.PRIdLEAST32$SEGMENT;
    }

    public static MemorySegment PRIdLEAST64() {
        return constants$105.PRIdLEAST64$SEGMENT;
    }

    public static MemorySegment PRIdFAST8() {
        return constants$105.PRIdFAST8$SEGMENT;
    }

    public static MemorySegment PRIdFAST16() {
        return constants$105.PRIdFAST16$SEGMENT;
    }

    public static MemorySegment PRIdFAST32() {
        return constants$105.PRIdFAST32$SEGMENT;
    }

    public static MemorySegment PRIdFAST64() {
        return constants$105.PRIdFAST64$SEGMENT;
    }

    public static MemorySegment PRIi8() {
        return constants$106.PRIi8$SEGMENT;
    }

    public static MemorySegment PRIi16() {
        return constants$106.PRIi16$SEGMENT;
    }

    public static MemorySegment PRIi32() {
        return constants$106.PRIi32$SEGMENT;
    }

    public static MemorySegment PRIi64() {
        return constants$106.PRIi64$SEGMENT;
    }

    public static MemorySegment PRIiLEAST8() {
        return constants$106.PRIiLEAST8$SEGMENT;
    }

    public static MemorySegment PRIiLEAST16() {
        return constants$106.PRIiLEAST16$SEGMENT;
    }

    public static MemorySegment PRIiLEAST32() {
        return constants$107.PRIiLEAST32$SEGMENT;
    }

    public static MemorySegment PRIiLEAST64() {
        return constants$107.PRIiLEAST64$SEGMENT;
    }

    public static MemorySegment PRIiFAST8() {
        return constants$107.PRIiFAST8$SEGMENT;
    }

    public static MemorySegment PRIiFAST16() {
        return constants$107.PRIiFAST16$SEGMENT;
    }

    public static MemorySegment PRIiFAST32() {
        return constants$107.PRIiFAST32$SEGMENT;
    }

    public static MemorySegment PRIiFAST64() {
        return constants$107.PRIiFAST64$SEGMENT;
    }

    public static MemorySegment PRIo8() {
        return constants$108.PRIo8$SEGMENT;
    }

    public static MemorySegment PRIo16() {
        return constants$108.PRIo16$SEGMENT;
    }

    public static MemorySegment PRIo32() {
        return constants$108.PRIo32$SEGMENT;
    }

    public static MemorySegment PRIo64() {
        return constants$108.PRIo64$SEGMENT;
    }

    public static MemorySegment PRIoLEAST8() {
        return constants$108.PRIoLEAST8$SEGMENT;
    }

    public static MemorySegment PRIoLEAST16() {
        return constants$108.PRIoLEAST16$SEGMENT;
    }

    public static MemorySegment PRIoLEAST32() {
        return constants$109.PRIoLEAST32$SEGMENT;
    }

    public static MemorySegment PRIoLEAST64() {
        return constants$109.PRIoLEAST64$SEGMENT;
    }

    public static MemorySegment PRIoFAST8() {
        return constants$109.PRIoFAST8$SEGMENT;
    }

    public static MemorySegment PRIoFAST16() {
        return constants$109.PRIoFAST16$SEGMENT;
    }

    public static MemorySegment PRIoFAST32() {
        return constants$109.PRIoFAST32$SEGMENT;
    }

    public static MemorySegment PRIoFAST64() {
        return constants$109.PRIoFAST64$SEGMENT;
    }

    public static MemorySegment PRIu8() {
        return constants$110.PRIu8$SEGMENT;
    }

    public static MemorySegment PRIu16() {
        return constants$110.PRIu16$SEGMENT;
    }

    public static MemorySegment PRIu32() {
        return constants$110.PRIu32$SEGMENT;
    }

    public static MemorySegment PRIu64() {
        return constants$110.PRIu64$SEGMENT;
    }

    public static MemorySegment PRIuLEAST8() {
        return constants$110.PRIuLEAST8$SEGMENT;
    }

    public static MemorySegment PRIuLEAST16() {
        return constants$110.PRIuLEAST16$SEGMENT;
    }

    public static MemorySegment PRIuLEAST32() {
        return constants$111.PRIuLEAST32$SEGMENT;
    }

    public static MemorySegment PRIuLEAST64() {
        return constants$111.PRIuLEAST64$SEGMENT;
    }

    public static MemorySegment PRIuFAST8() {
        return constants$111.PRIuFAST8$SEGMENT;
    }

    public static MemorySegment PRIuFAST16() {
        return constants$111.PRIuFAST16$SEGMENT;
    }

    public static MemorySegment PRIuFAST32() {
        return constants$111.PRIuFAST32$SEGMENT;
    }

    public static MemorySegment PRIuFAST64() {
        return constants$111.PRIuFAST64$SEGMENT;
    }

    public static MemorySegment PRIx8() {
        return constants$112.PRIx8$SEGMENT;
    }

    public static MemorySegment PRIx16() {
        return constants$112.PRIx16$SEGMENT;
    }

    public static MemorySegment PRIx32() {
        return constants$112.PRIx32$SEGMENT;
    }

    public static MemorySegment PRIx64() {
        return constants$112.PRIx64$SEGMENT;
    }

    public static MemorySegment PRIxLEAST8() {
        return constants$112.PRIxLEAST8$SEGMENT;
    }

    public static MemorySegment PRIxLEAST16() {
        return constants$112.PRIxLEAST16$SEGMENT;
    }

    public static MemorySegment PRIxLEAST32() {
        return constants$113.PRIxLEAST32$SEGMENT;
    }

    public static MemorySegment PRIxLEAST64() {
        return constants$113.PRIxLEAST64$SEGMENT;
    }

    public static MemorySegment PRIxFAST8() {
        return constants$113.PRIxFAST8$SEGMENT;
    }

    public static MemorySegment PRIxFAST16() {
        return constants$113.PRIxFAST16$SEGMENT;
    }

    public static MemorySegment PRIxFAST32() {
        return constants$113.PRIxFAST32$SEGMENT;
    }

    public static MemorySegment PRIxFAST64() {
        return constants$113.PRIxFAST64$SEGMENT;
    }

    public static MemorySegment PRIX8() {
        return constants$114.PRIX8$SEGMENT;
    }

    public static MemorySegment PRIX16() {
        return constants$114.PRIX16$SEGMENT;
    }

    public static MemorySegment PRIX32() {
        return constants$114.PRIX32$SEGMENT;
    }

    public static MemorySegment PRIX64() {
        return constants$114.PRIX64$SEGMENT;
    }

    public static MemorySegment PRIXLEAST8() {
        return constants$114.PRIXLEAST8$SEGMENT;
    }

    public static MemorySegment PRIXLEAST16() {
        return constants$114.PRIXLEAST16$SEGMENT;
    }

    public static MemorySegment PRIXLEAST32() {
        return constants$115.PRIXLEAST32$SEGMENT;
    }

    public static MemorySegment PRIXLEAST64() {
        return constants$115.PRIXLEAST64$SEGMENT;
    }

    public static MemorySegment PRIXFAST8() {
        return constants$115.PRIXFAST8$SEGMENT;
    }

    public static MemorySegment PRIXFAST16() {
        return constants$115.PRIXFAST16$SEGMENT;
    }

    public static MemorySegment PRIXFAST32() {
        return constants$115.PRIXFAST32$SEGMENT;
    }

    public static MemorySegment PRIXFAST64() {
        return constants$115.PRIXFAST64$SEGMENT;
    }

    public static MemorySegment PRIdMAX() {
        return constants$116.PRIdMAX$SEGMENT;
    }

    public static MemorySegment PRIiMAX() {
        return constants$116.PRIiMAX$SEGMENT;
    }

    public static MemorySegment PRIoMAX() {
        return constants$116.PRIoMAX$SEGMENT;
    }

    public static MemorySegment PRIuMAX() {
        return constants$116.PRIuMAX$SEGMENT;
    }

    public static MemorySegment PRIxMAX() {
        return constants$116.PRIxMAX$SEGMENT;
    }

    public static MemorySegment PRIXMAX() {
        return constants$116.PRIXMAX$SEGMENT;
    }

    public static MemorySegment PRIdPTR() {
        return constants$117.PRIdPTR$SEGMENT;
    }

    public static MemorySegment PRIiPTR() {
        return constants$117.PRIiPTR$SEGMENT;
    }

    public static MemorySegment PRIoPTR() {
        return constants$117.PRIoPTR$SEGMENT;
    }

    public static MemorySegment PRIuPTR() {
        return constants$117.PRIuPTR$SEGMENT;
    }

    public static MemorySegment PRIxPTR() {
        return constants$117.PRIxPTR$SEGMENT;
    }

    public static MemorySegment PRIXPTR() {
        return constants$117.PRIXPTR$SEGMENT;
    }

    public static MemorySegment SCNd8() {
        return constants$118.SCNd8$SEGMENT;
    }

    public static MemorySegment SCNd16() {
        return constants$118.SCNd16$SEGMENT;
    }

    public static MemorySegment SCNd32() {
        return constants$118.SCNd32$SEGMENT;
    }

    public static MemorySegment SCNd64() {
        return constants$118.SCNd64$SEGMENT;
    }

    public static MemorySegment SCNdLEAST8() {
        return constants$118.SCNdLEAST8$SEGMENT;
    }

    public static MemorySegment SCNdLEAST16() {
        return constants$118.SCNdLEAST16$SEGMENT;
    }

    public static MemorySegment SCNdLEAST32() {
        return constants$119.SCNdLEAST32$SEGMENT;
    }

    public static MemorySegment SCNdLEAST64() {
        return constants$119.SCNdLEAST64$SEGMENT;
    }

    public static MemorySegment SCNdFAST8() {
        return constants$119.SCNdFAST8$SEGMENT;
    }

    public static MemorySegment SCNdFAST16() {
        return constants$119.SCNdFAST16$SEGMENT;
    }

    public static MemorySegment SCNdFAST32() {
        return constants$119.SCNdFAST32$SEGMENT;
    }

    public static MemorySegment SCNdFAST64() {
        return constants$119.SCNdFAST64$SEGMENT;
    }

    public static MemorySegment SCNi8() {
        return constants$120.SCNi8$SEGMENT;
    }

    public static MemorySegment SCNi16() {
        return constants$120.SCNi16$SEGMENT;
    }

    public static MemorySegment SCNi32() {
        return constants$120.SCNi32$SEGMENT;
    }

    public static MemorySegment SCNi64() {
        return constants$120.SCNi64$SEGMENT;
    }

    public static MemorySegment SCNiLEAST8() {
        return constants$120.SCNiLEAST8$SEGMENT;
    }

    public static MemorySegment SCNiLEAST16() {
        return constants$120.SCNiLEAST16$SEGMENT;
    }

    public static MemorySegment SCNiLEAST32() {
        return constants$121.SCNiLEAST32$SEGMENT;
    }

    public static MemorySegment SCNiLEAST64() {
        return constants$121.SCNiLEAST64$SEGMENT;
    }

    public static MemorySegment SCNiFAST8() {
        return constants$121.SCNiFAST8$SEGMENT;
    }

    public static MemorySegment SCNiFAST16() {
        return constants$121.SCNiFAST16$SEGMENT;
    }

    public static MemorySegment SCNiFAST32() {
        return constants$121.SCNiFAST32$SEGMENT;
    }

    public static MemorySegment SCNiFAST64() {
        return constants$121.SCNiFAST64$SEGMENT;
    }

    public static MemorySegment SCNu8() {
        return constants$122.SCNu8$SEGMENT;
    }

    public static MemorySegment SCNu16() {
        return constants$122.SCNu16$SEGMENT;
    }

    public static MemorySegment SCNu32() {
        return constants$122.SCNu32$SEGMENT;
    }

    public static MemorySegment SCNu64() {
        return constants$122.SCNu64$SEGMENT;
    }

    public static MemorySegment SCNuLEAST8() {
        return constants$122.SCNuLEAST8$SEGMENT;
    }

    public static MemorySegment SCNuLEAST16() {
        return constants$122.SCNuLEAST16$SEGMENT;
    }

    public static MemorySegment SCNuLEAST32() {
        return constants$123.SCNuLEAST32$SEGMENT;
    }

    public static MemorySegment SCNuLEAST64() {
        return constants$123.SCNuLEAST64$SEGMENT;
    }

    public static MemorySegment SCNuFAST8() {
        return constants$123.SCNuFAST8$SEGMENT;
    }

    public static MemorySegment SCNuFAST16() {
        return constants$123.SCNuFAST16$SEGMENT;
    }

    public static MemorySegment SCNuFAST32() {
        return constants$123.SCNuFAST32$SEGMENT;
    }

    public static MemorySegment SCNuFAST64() {
        return constants$123.SCNuFAST64$SEGMENT;
    }

    public static MemorySegment SCNo8() {
        return constants$124.SCNo8$SEGMENT;
    }

    public static MemorySegment SCNo16() {
        return constants$124.SCNo16$SEGMENT;
    }

    public static MemorySegment SCNo32() {
        return constants$124.SCNo32$SEGMENT;
    }

    public static MemorySegment SCNo64() {
        return constants$124.SCNo64$SEGMENT;
    }

    public static MemorySegment SCNoLEAST8() {
        return constants$124.SCNoLEAST8$SEGMENT;
    }

    public static MemorySegment SCNoLEAST16() {
        return constants$124.SCNoLEAST16$SEGMENT;
    }

    public static MemorySegment SCNoLEAST32() {
        return constants$125.SCNoLEAST32$SEGMENT;
    }

    public static MemorySegment SCNoLEAST64() {
        return constants$125.SCNoLEAST64$SEGMENT;
    }

    public static MemorySegment SCNoFAST8() {
        return constants$125.SCNoFAST8$SEGMENT;
    }

    public static MemorySegment SCNoFAST16() {
        return constants$125.SCNoFAST16$SEGMENT;
    }

    public static MemorySegment SCNoFAST32() {
        return constants$125.SCNoFAST32$SEGMENT;
    }

    public static MemorySegment SCNoFAST64() {
        return constants$125.SCNoFAST64$SEGMENT;
    }

    public static MemorySegment SCNx8() {
        return constants$126.SCNx8$SEGMENT;
    }

    public static MemorySegment SCNx16() {
        return constants$126.SCNx16$SEGMENT;
    }

    public static MemorySegment SCNx32() {
        return constants$126.SCNx32$SEGMENT;
    }

    public static MemorySegment SCNx64() {
        return constants$126.SCNx64$SEGMENT;
    }

    public static MemorySegment SCNxLEAST8() {
        return constants$126.SCNxLEAST8$SEGMENT;
    }

    public static MemorySegment SCNxLEAST16() {
        return constants$126.SCNxLEAST16$SEGMENT;
    }

    public static MemorySegment SCNxLEAST32() {
        return constants$127.SCNxLEAST32$SEGMENT;
    }

    public static MemorySegment SCNxLEAST64() {
        return constants$127.SCNxLEAST64$SEGMENT;
    }

    public static MemorySegment SCNxFAST8() {
        return constants$127.SCNxFAST8$SEGMENT;
    }

    public static MemorySegment SCNxFAST16() {
        return constants$127.SCNxFAST16$SEGMENT;
    }

    public static MemorySegment SCNxFAST32() {
        return constants$127.SCNxFAST32$SEGMENT;
    }

    public static MemorySegment SCNxFAST64() {
        return constants$127.SCNxFAST64$SEGMENT;
    }

    public static MemorySegment SCNdMAX() {
        return constants$128.SCNdMAX$SEGMENT;
    }

    public static MemorySegment SCNiMAX() {
        return constants$128.SCNiMAX$SEGMENT;
    }

    public static MemorySegment SCNoMAX() {
        return constants$128.SCNoMAX$SEGMENT;
    }

    public static MemorySegment SCNuMAX() {
        return constants$128.SCNuMAX$SEGMENT;
    }

    public static MemorySegment SCNxMAX() {
        return constants$128.SCNxMAX$SEGMENT;
    }

    public static MemorySegment SCNdPTR() {
        return constants$128.SCNdPTR$SEGMENT;
    }

    public static MemorySegment SCNiPTR() {
        return constants$129.SCNiPTR$SEGMENT;
    }

    public static MemorySegment SCNoPTR() {
        return constants$129.SCNoPTR$SEGMENT;
    }

    public static MemorySegment SCNuPTR() {
        return constants$129.SCNuPTR$SEGMENT;
    }

    public static MemorySegment SCNxPTR() {
        return constants$129.SCNxPTR$SEGMENT;
    }

    public static double LIBRAW_DEFAULT_ADJUST_MAXIMUM_THRESHOLD() {
        return 0.75d;
    }

    public static double LIBRAW_DEFAULT_AUTO_BRIGHTNESS_THRESHOLD() {
        return 0.01d;
    }

    public static long LIBRAW_MAX_ALLOC_MB_DEFAULT() {
        return 2048L;
    }

    public static long LIBRAW_MAX_THUMBNAIL_MB() {
        return 512L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_int8u() {
        return (int) 1L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_string() {
        return (int) 2L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_int16u() {
        return (int) 3L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_int32u() {
        return (int) 4L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_rational64u() {
        return (int) 5L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_int8s() {
        return (int) 6L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_undef() {
        return (int) 7L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_binary() {
        return (int) 7L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_int16s() {
        return (int) 8L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_int32s() {
        return (int) 9L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_rational64s() {
        return (int) 10L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_float() {
        return (int) 11L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_double() {
        return (int) 12L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_ifd() {
        return (int) 13L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_unicode() {
        return (int) 14L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_complex() {
        return (int) 15L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_int64u() {
        return (int) 16L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_int64s() {
        return (int) 17L;
    }

    public static int LIBRAW_EXIFTOOLTAGTYPE_ifd64() {
        return (int) 18L;
    }

    public static long LIBRAW_LENS_NOT_SET() {
        return -1L;
    }

    public static MemorySegment LIBRAW_VERSION_STR() {
        return constants$129.LIBRAW_VERSION_STR$SEGMENT;
    }

    public static int LIBRAW_VERSION() {
        return (int) 5122L;
    }
}


