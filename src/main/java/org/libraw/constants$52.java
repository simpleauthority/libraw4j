// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.FunctionDescriptor;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_DOUBLE;
import static jdk.incubator.foreign.CLinker.C_INT;

class constants$52 {

    static final FunctionDescriptor __fabs$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle __fabs$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__fabs",
            "(D)D",
            constants$52.__fabs$FUNC, false
    );
    static final FunctionDescriptor floor$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle floor$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "floor",
            "(D)D",
            constants$52.floor$FUNC, false
    );
    static final FunctionDescriptor __floor$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle __floor$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__floor",
            "(D)D",
            constants$52.__floor$FUNC, false
    );
    static final FunctionDescriptor fmod$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle fmod$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "fmod",
            "(DD)D",
            constants$52.fmod$FUNC, false
    );
    static final FunctionDescriptor __fmod$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle __fmod$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__fmod",
            "(DD)D",
            constants$52.__fmod$FUNC, false
    );
    static final FunctionDescriptor isinf$FUNC = FunctionDescriptor.of(C_INT,
            C_DOUBLE
    );
    static final MethodHandle isinf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "isinf",
            "(D)I",
            constants$52.isinf$FUNC, false
    );
}


