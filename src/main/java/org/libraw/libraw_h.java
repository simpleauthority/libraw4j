// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;
import jdk.incubator.foreign.SymbolLookup;
import jdk.incubator.foreign.ValueLayout;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;

import static jdk.incubator.foreign.CLinker.C_DOUBLE;
import static jdk.incubator.foreign.CLinker.C_FLOAT;
import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_LONG;
import static jdk.incubator.foreign.CLinker.C_SHORT;

public class libraw_h extends libraw_h_1 {

    static final SymbolLookup LIBRARIES = RuntimeHelper.lookup();    /* package-private */
    public static ValueLayout __int16_t = C_SHORT;
    public static ValueLayout __int32_t = C_INT;
    public static ValueLayout __int64_t = C_LONG;
    public static ValueLayout __int_least16_t = C_SHORT;
    public static ValueLayout __int_least32_t = C_INT;
    public static ValueLayout __int_least64_t = C_LONG;
    public static ValueLayout __quad_t = C_LONG;
    public static ValueLayout __intmax_t = C_LONG;
    public static ValueLayout __off_t = C_LONG;
    public static ValueLayout __off64_t = C_LONG;
    public static ValueLayout __pid_t = C_INT;
    public static ValueLayout __clock_t = C_LONG;
    public static ValueLayout __time_t = C_LONG;
    public static ValueLayout __suseconds_t = C_LONG;
    public static ValueLayout __suseconds64_t = C_LONG;
    public static ValueLayout __daddr_t = C_INT;
    public static ValueLayout __key_t = C_INT;
    public static ValueLayout __clockid_t = C_INT;
    public static ValueLayout __blksize_t = C_LONG;
    public static ValueLayout __blkcnt_t = C_LONG;
    public static ValueLayout __blkcnt64_t = C_LONG;
    public static ValueLayout __fsword_t = C_LONG;
    public static ValueLayout __ssize_t = C_LONG;
    public static ValueLayout __syscall_slong_t = C_LONG;
    public static ValueLayout __loff_t = C_LONG;
    public static ValueLayout __intptr_t = C_LONG;
    public static ValueLayout __sig_atomic_t = C_INT;
    public static ValueLayout off_t = C_LONG;
    public static ValueLayout ssize_t = C_LONG;
    public static ValueLayout _Float32 = C_FLOAT;
    public static ValueLayout _Float64 = C_DOUBLE;
    public static ValueLayout _Float32x = C_DOUBLE;
    public static ValueLayout wchar_t = C_INT;
    public static ValueLayout quad_t = C_LONG;
    public static ValueLayout loff_t = C_LONG;
    public static ValueLayout pid_t = C_INT;
    public static ValueLayout daddr_t = C_INT;
    public static ValueLayout key_t = C_INT;
    public static ValueLayout clock_t = C_LONG;
    public static ValueLayout clockid_t = C_INT;
    public static ValueLayout time_t = C_LONG;
    public static ValueLayout int16_t = C_SHORT;
    public static ValueLayout int32_t = C_INT;
    public static ValueLayout int64_t = C_LONG;
    public static ValueLayout register_t = C_LONG;
    public static ValueLayout suseconds_t = C_LONG;
    public static ValueLayout __fd_mask = C_LONG;
    public static ValueLayout fd_mask = C_LONG;
    public static ValueLayout blksize_t = C_LONG;
    public static ValueLayout blkcnt_t = C_LONG;
    public static ValueLayout pthread_once_t = C_INT;
    public static ValueLayout pthread_spinlock_t = C_INT;
    public static ValueLayout float_t = C_FLOAT;
    public static ValueLayout double_t = C_DOUBLE;
    public static ValueLayout __itimer_which_t = C_INT;
    public static ValueLayout int_least16_t = C_SHORT;
    public static ValueLayout int_least32_t = C_INT;
    public static ValueLayout int_least64_t = C_LONG;
    public static ValueLayout int_fast16_t = C_LONG;
    public static ValueLayout int_fast32_t = C_LONG;
    public static ValueLayout int_fast64_t = C_LONG;
    public static ValueLayout intptr_t = C_LONG;
    public static ValueLayout intmax_t = C_LONG;
    public static ValueLayout __gwchar_t = C_INT;

    static {
    }

    libraw_h() {
    }

    public static int _FILE_OFFSET_BITS() {
        return (int) 64L;
    }

    public static int _LIBC_LIMITS_H_() {
        return (int) 1L;
    }

    public static int _FEATURES_H() {
        return (int) 1L;
    }

    public static int _DEFAULT_SOURCE() {
        return (int) 1L;
    }

    public static int __GLIBC_USE_ISOC2X() {
        return (int) 0L;
    }

    public static int __USE_ISOC11() {
        return (int) 1L;
    }

    public static int __USE_ISOC99() {
        return (int) 1L;
    }

    public static int __USE_ISOC95() {
        return (int) 1L;
    }

    public static int __USE_POSIX_IMPLICITLY() {
        return (int) 1L;
    }

    public static int _POSIX_SOURCE() {
        return (int) 1L;
    }

    public static int __USE_POSIX() {
        return (int) 1L;
    }

    public static int __USE_POSIX2() {
        return (int) 1L;
    }

    public static int __USE_POSIX199309() {
        return (int) 1L;
    }

    public static int __USE_POSIX199506() {
        return (int) 1L;
    }

    public static int __USE_XOPEN2K() {
        return (int) 1L;
    }

    public static int __USE_XOPEN2K8() {
        return (int) 1L;
    }

    public static int _ATFILE_SOURCE() {
        return (int) 1L;
    }

    public static int __USE_FILE_OFFSET64() {
        return (int) 1L;
    }

    public static int __USE_MISC() {
        return (int) 1L;
    }

    public static int __USE_ATFILE() {
        return (int) 1L;
    }

    public static int __USE_FORTIFY_LEVEL() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int) 0L;
    }

    public static int _STDC_PREDEF_H() {
        return (int) 1L;
    }

    public static int __STDC_IEC_559__() {
        return (int) 1L;
    }

    public static int __STDC_IEC_559_COMPLEX__() {
        return (int) 1L;
    }

    public static int __GNU_LIBRARY__() {
        return (int) 6L;
    }

    public static int __GLIBC__() {
        return (int) 2L;
    }

    public static int __GLIBC_MINOR__() {
        return (int) 33L;
    }

    public static int _SYS_CDEFS_H() {
        return (int) 1L;
    }

    public static int __glibc_c99_flexarr_available() {
        return (int) 1L;
    }

    public static int __WORDSIZE() {
        return (int) 64L;
    }

    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int) 1L;
    }

    public static int __SYSCALL_WORDSIZE() {
        return (int) 64L;
    }

    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int) 0L;
    }

    public static int __HAVE_GENERIC_SELECTION() {
        return (int) 1L;
    }

    public static int __GLIBC_USE_LIB_EXT2() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int) 0L;
    }

    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int) 0L;
    }

    public static int MB_LEN_MAX() {
        return (int) 16L;
    }

    public static int _BITS_POSIX1_LIM_H() {
        return (int) 1L;
    }

    public static int _POSIX_AIO_LISTIO_MAX() {
        return (int) 2L;
    }

    public static int _POSIX_AIO_MAX() {
        return (int) 1L;
    }

    public static int _POSIX_ARG_MAX() {
        return (int) 4096L;
    }

    public static int _POSIX_CHILD_MAX() {
        return (int) 25L;
    }

    public static int _POSIX_DELAYTIMER_MAX() {
        return (int) 32L;
    }

    public static int _POSIX_HOST_NAME_MAX() {
        return (int) 255L;
    }

    public static int _POSIX_LINK_MAX() {
        return (int) 8L;
    }

    public static int _POSIX_LOGIN_NAME_MAX() {
        return (int) 9L;
    }

    public static int _POSIX_MAX_CANON() {
        return (int) 255L;
    }

    public static int _POSIX_MAX_INPUT() {
        return (int) 255L;
    }

    public static int _POSIX_MQ_OPEN_MAX() {
        return (int) 8L;
    }

    public static int _POSIX_MQ_PRIO_MAX() {
        return (int) 32L;
    }

    public static int _POSIX_NAME_MAX() {
        return (int) 14L;
    }

    public static int _POSIX_NGROUPS_MAX() {
        return (int) 8L;
    }

    public static int _POSIX_OPEN_MAX() {
        return (int) 20L;
    }

    public static int _POSIX_PATH_MAX() {
        return (int) 256L;
    }

    public static int _POSIX_PIPE_BUF() {
        return (int) 512L;
    }

    public static int _POSIX_RE_DUP_MAX() {
        return (int) 255L;
    }

    public static int _POSIX_RTSIG_MAX() {
        return (int) 8L;
    }

    public static int _POSIX_SEM_NSEMS_MAX() {
        return (int) 256L;
    }

    public static int _POSIX_SEM_VALUE_MAX() {
        return (int) 32767L;
    }

    public static int _POSIX_SIGQUEUE_MAX() {
        return (int) 32L;
    }

    public static int _POSIX_SSIZE_MAX() {
        return (int) 32767L;
    }

    public static int _POSIX_STREAM_MAX() {
        return (int) 8L;
    }

    public static int _POSIX_SYMLINK_MAX() {
        return (int) 255L;
    }

    public static int _POSIX_SYMLOOP_MAX() {
        return (int) 8L;
    }

    public static int _POSIX_TIMER_MAX() {
        return (int) 32L;
    }

    public static int _POSIX_TTY_NAME_MAX() {
        return (int) 9L;
    }

    public static int _POSIX_TZNAME_MAX() {
        return (int) 6L;
    }

    public static int _POSIX_CLOCKRES_MIN() {
        return (int) 20000000L;
    }

    public static int NR_OPEN() {
        return (int) 1024L;
    }

    public static int NGROUPS_MAX() {
        return (int) 65536L;
    }

    public static int ARG_MAX() {
        return (int) 131072L;
    }

    public static int LINK_MAX() {
        return (int) 127L;
    }

    public static int MAX_CANON() {
        return (int) 255L;
    }

    public static int MAX_INPUT() {
        return (int) 255L;
    }

    public static int NAME_MAX() {
        return (int) 255L;
    }

    public static int PATH_MAX() {
        return (int) 4096L;
    }

    public static int PIPE_BUF() {
        return (int) 4096L;
    }

    public static int XATTR_NAME_MAX() {
        return (int) 255L;
    }

    public static int XATTR_SIZE_MAX() {
        return (int) 65536L;
    }

    public static int XATTR_LIST_MAX() {
        return (int) 65536L;
    }

    public static int RTSIG_MAX() {
        return (int) 32L;
    }

    public static int _POSIX_THREAD_KEYS_MAX() {
        return (int) 128L;
    }

    public static int PTHREAD_KEYS_MAX() {
        return (int) 1024L;
    }

    public static int _POSIX_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int) 4L;
    }

    public static int _POSIX_THREAD_THREADS_MAX() {
        return (int) 64L;
    }

    public static int AIO_PRIO_DELTA_MAX() {
        return (int) 20L;
    }

    public static int PTHREAD_STACK_MIN() {
        return (int) 16384L;
    }

    public static int DELAYTIMER_MAX() {
        return (int) 2147483647L;
    }

    public static int TTY_NAME_MAX() {
        return (int) 32L;
    }

    public static int LOGIN_NAME_MAX() {
        return (int) 256L;
    }

    public static int HOST_NAME_MAX() {
        return (int) 64L;
    }

    public static int MQ_PRIO_MAX() {
        return (int) 32768L;
    }

    public static int _BITS_POSIX2_LIM_H() {
        return (int) 1L;
    }

    public static int _POSIX2_BC_BASE_MAX() {
        return (int) 99L;
    }

    public static int _POSIX2_BC_DIM_MAX() {
        return (int) 2048L;
    }

    public static int _POSIX2_BC_SCALE_MAX() {
        return (int) 99L;
    }

    public static int _POSIX2_BC_STRING_MAX() {
        return (int) 1000L;
    }

    public static int _POSIX2_COLL_WEIGHTS_MAX() {
        return (int) 2L;
    }

    public static int _POSIX2_EXPR_NEST_MAX() {
        return (int) 32L;
    }

    public static int _POSIX2_LINE_MAX() {
        return (int) 2048L;
    }

    public static int _POSIX2_RE_DUP_MAX() {
        return (int) 255L;
    }

    public static int _POSIX2_CHARCLASS_NAME_MAX() {
        return (int) 14L;
    }

    public static int COLL_WEIGHTS_MAX() {
        return (int) 255L;
    }

    public static int CHARCLASS_NAME_MAX() {
        return (int) 2048L;
    }

    public static int _MEMORY_H() {
        return (int) 1L;
    }

    public static int _STRING_H() {
        return (int) 1L;
    }

    public static int _BITS_TYPES_LOCALE_T_H() {
        return (int) 1L;
    }

    public static int _BITS_TYPES___LOCALE_T_H() {
        return (int) 1L;
    }

    public static int _STRINGS_H() {
        return (int) 1L;
    }

    public static int _STDIO_H() {
        return (int) 1L;
    }

    public static int __GNUC_VA_LIST() {
        return (int) 1L;
    }

    public static int _BITS_TYPES_H() {
        return (int) 1L;
    }

    public static int _BITS_TYPESIZES_H() {
        return (int) 1L;
    }

    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int) 1L;
    }

    public static int __INO_T_MATCHES_INO64_T() {
        return (int) 1L;
    }

    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int) 1L;
    }

    public static int __STATFS_MATCHES_STATFS64() {
        return (int) 1L;
    }

    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int) 1L;
    }

    public static int __FD_SETSIZE() {
        return (int) 1024L;
    }

    public static int _BITS_TIME64_H() {
        return (int) 1L;
    }

    public static int _____fpos_t_defined() {
        return (int) 1L;
    }

    public static int ____mbstate_t_defined() {
        return (int) 1L;
    }

    public static int _____fpos64_t_defined() {
        return (int) 1L;
    }

    public static int ____FILE_defined() {
        return (int) 1L;
    }

    public static int __FILE_defined() {
        return (int) 1L;
    }

    public static int __struct_FILE_defined() {
        return (int) 1L;
    }

    public static int _IO_EOF_SEEN() {
        return (int) 16L;
    }

    public static int _IO_ERR_SEEN() {
        return (int) 32L;
    }

    public static int _IO_USER_LOCK() {
        return (int) 32768L;
    }

    public static int _IOFBF() {
        return (int) 0L;
    }

    public static int _IOLBF() {
        return (int) 1L;
    }

    public static int _IONBF() {
        return (int) 2L;
    }

    public static int BUFSIZ() {
        return (int) 8192L;
    }

    public static int SEEK_SET() {
        return (int) 0L;
    }

    public static int SEEK_CUR() {
        return (int) 1L;
    }

    public static int SEEK_END() {
        return (int) 2L;
    }

    public static int _BITS_STDIO_LIM_H() {
        return (int) 1L;
    }

    public static int L_tmpnam() {
        return (int) 20L;
    }

    public static int TMP_MAX() {
        return (int) 238328L;
    }

    public static int FILENAME_MAX() {
        return (int) 4096L;
    }

    public static int L_ctermid() {
        return (int) 9L;
    }

    public static int FOPEN_MAX() {
        return (int) 16L;
    }

    public static int __HAVE_FLOAT128() {
        return (int) 0L;
    }

    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int) 0L;
    }

    public static int __HAVE_FLOAT64X() {
        return (int) 1L;
    }

    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int) 1L;
    }

    public static int __HAVE_FLOAT16() {
        return (int) 0L;
    }

    public static int __HAVE_FLOAT32() {
        return (int) 1L;
    }

    public static int __HAVE_FLOAT64() {
        return (int) 1L;
    }

    public static int __HAVE_FLOAT32X() {
        return (int) 1L;
    }

    public static int __HAVE_FLOAT128X() {
        return (int) 0L;
    }

    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int) 0L;
    }

    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int) 0L;
    }

    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int) 0L;
    }

    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int) 0L;
    }

    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int) 0L;
    }

    public static int _STDLIB_H() {
        return (int) 1L;
    }

    public static int WNOHANG() {
        return (int) 1L;
    }

    public static int WUNTRACED() {
        return (int) 2L;
    }

    public static int WSTOPPED() {
        return (int) 2L;
    }

    public static int WEXITED() {
        return (int) 4L;
    }

    public static int WCONTINUED() {
        return (int) 8L;
    }

    public static int WNOWAIT() {
        return (int) 16777216L;
    }

    public static int __WNOTHREAD() {
        return (int) 536870912L;
    }

    public static int __WALL() {
        return (int) 1073741824L;
    }

    public static int __W_CONTINUED() {
        return (int) 65535L;
    }

    public static int __WCOREFLAG() {
        return (int) 128L;
    }

    public static int __ldiv_t_defined() {
        return (int) 1L;
    }

    public static int __lldiv_t_defined() {
        return (int) 1L;
    }

    public static int RAND_MAX() {
        return (int) 2147483647L;
    }

    public static int EXIT_FAILURE() {
        return (int) 1L;
    }

    public static int EXIT_SUCCESS() {
        return (int) 0L;
    }

    public static int _SYS_TYPES_H() {
        return (int) 1L;
    }

    public static int __clock_t_defined() {
        return (int) 1L;
    }

    public static int __clockid_t_defined() {
        return (int) 1L;
    }

    public static int __time_t_defined() {
        return (int) 1L;
    }

    public static int __timer_t_defined() {
        return (int) 1L;
    }

    public static int _BITS_STDINT_INTN_H() {
        return (int) 1L;
    }

    public static int __BIT_TYPES_DEFINED__() {
        return (int) 1L;
    }

    public static int _ENDIAN_H() {
        return (int) 1L;
    }

    public static int _BITS_ENDIAN_H() {
        return (int) 1L;
    }

    public static int __LITTLE_ENDIAN() {
        return (int) 1234L;
    }

    public static int __BIG_ENDIAN() {
        return (int) 4321L;
    }

    public static int __PDP_ENDIAN() {
        return (int) 3412L;
    }

    public static int _BITS_ENDIANNESS_H() {
        return (int) 1L;
    }

    public static int _BITS_BYTESWAP_H() {
        return (int) 1L;
    }

    public static int _BITS_UINTN_IDENTITY_H() {
        return (int) 1L;
    }

    public static int _SYS_SELECT_H() {
        return (int) 1L;
    }

    public static int __sigset_t_defined() {
        return (int) 1L;
    }

    public static int __timeval_defined() {
        return (int) 1L;
    }

    public static int _STRUCT_TIMESPEC() {
        return (int) 1L;
    }

    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int) 1L;
    }

    public static int _THREAD_SHARED_TYPES_H() {
        return (int) 1L;
    }

    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int) 1L;
    }

    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int) 40L;
    }

    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int) 56L;
    }

    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int) 56L;
    }

    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int) 32L;
    }

    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int) 4L;
    }

    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int) 48L;
    }

    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int) 4L;
    }

    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int) 8L;
    }

    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int) 4L;
    }

    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int) 1L;
    }

    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int) 1L;
    }

    public static int __have_pthread_attr_t() {
        return (int) 1L;
    }

    public static int _ALLOCA_H() {
        return (int) 1L;
    }

    public static int _MATH_H() {
        return (int) 1L;
    }

    public static int _BITS_LIBM_SIMD_DECL_STUBS_H() {
        return (int) 1L;
    }

    public static int __FP_LOGB0_IS_MIN() {
        return (int) 1L;
    }

    public static int __FP_LOGBNAN_IS_MIN() {
        return (int) 1L;
    }

    public static int __MATH_DECLARING_DOUBLE() {
        return (int) 1L;
    }

    public static int __MATH_DECLARING_FLOATN() {
        return (int) 0L;
    }

    public static int __MATH_DECLARE_LDOUBLE() {
        return (int) 1L;
    }

    public static int FP_NAN() {
        return (int) 0L;
    }

    public static int FP_INFINITE() {
        return (int) 1L;
    }

    public static int FP_ZERO() {
        return (int) 2L;
    }

    public static int FP_SUBNORMAL() {
        return (int) 3L;
    }

    public static int FP_NORMAL() {
        return (int) 4L;
    }

    public static int MATH_ERRNO() {
        return (int) 1L;
    }

    public static int MATH_ERREXCEPT() {
        return (int) 2L;
    }

    public static int _ERRNO_H() {
        return (int) 1L;
    }

    public static int _BITS_ERRNO_H() {
        return (int) 1L;
    }

    public static int EPERM() {
        return (int) 1L;
    }

    public static int ENOENT() {
        return (int) 2L;
    }

    public static int ESRCH() {
        return (int) 3L;
    }

    public static int EINTR() {
        return (int) 4L;
    }

    public static int EIO() {
        return (int) 5L;
    }

    public static int ENXIO() {
        return (int) 6L;
    }

    public static int E2BIG() {
        return (int) 7L;
    }

    public static int ENOEXEC() {
        return (int) 8L;
    }

    public static int EBADF() {
        return (int) 9L;
    }

    public static int ECHILD() {
        return (int) 10L;
    }

    public static int EAGAIN() {
        return (int) 11L;
    }

    public static int ENOMEM() {
        return (int) 12L;
    }

    public static int EACCES() {
        return (int) 13L;
    }

    public static int EFAULT() {
        return (int) 14L;
    }

    public static int ENOTBLK() {
        return (int) 15L;
    }

    public static int EBUSY() {
        return (int) 16L;
    }

    public static int EEXIST() {
        return (int) 17L;
    }

    public static int EXDEV() {
        return (int) 18L;
    }

    public static int ENODEV() {
        return (int) 19L;
    }

    public static int ENOTDIR() {
        return (int) 20L;
    }

    public static int EISDIR() {
        return (int) 21L;
    }

    public static int EINVAL() {
        return (int) 22L;
    }

    public static int ENFILE() {
        return (int) 23L;
    }

    public static int EMFILE() {
        return (int) 24L;
    }

    public static int ENOTTY() {
        return (int) 25L;
    }

    public static int ETXTBSY() {
        return (int) 26L;
    }

    public static int EFBIG() {
        return (int) 27L;
    }

    public static int ENOSPC() {
        return (int) 28L;
    }

    public static int ESPIPE() {
        return (int) 29L;
    }

    public static int EROFS() {
        return (int) 30L;
    }

    public static int EMLINK() {
        return (int) 31L;
    }

    public static int EPIPE() {
        return (int) 32L;
    }

    public static int EDOM() {
        return (int) 33L;
    }

    public static int ERANGE() {
        return (int) 34L;
    }

    public static int EDEADLK() {
        return (int) 35L;
    }

    public static int ENAMETOOLONG() {
        return (int) 36L;
    }

    public static int ENOLCK() {
        return (int) 37L;
    }

    public static int ENOSYS() {
        return (int) 38L;
    }

    public static int ENOTEMPTY() {
        return (int) 39L;
    }

    public static int ELOOP() {
        return (int) 40L;
    }

    public static int ENOMSG() {
        return (int) 42L;
    }

    public static int EIDRM() {
        return (int) 43L;
    }

    public static int ECHRNG() {
        return (int) 44L;
    }

    public static int EL2NSYNC() {
        return (int) 45L;
    }

    public static int EL3HLT() {
        return (int) 46L;
    }

    public static int EL3RST() {
        return (int) 47L;
    }

    public static int ELNRNG() {
        return (int) 48L;
    }

    public static int EUNATCH() {
        return (int) 49L;
    }

    public static int ENOCSI() {
        return (int) 50L;
    }

    public static int EL2HLT() {
        return (int) 51L;
    }

    public static int EBADE() {
        return (int) 52L;
    }

    public static int EBADR() {
        return (int) 53L;
    }

    public static int EXFULL() {
        return (int) 54L;
    }

    public static int ENOANO() {
        return (int) 55L;
    }

    public static int EBADRQC() {
        return (int) 56L;
    }

    public static int EBADSLT() {
        return (int) 57L;
    }

    public static int EBFONT() {
        return (int) 59L;
    }

    public static int ENOSTR() {
        return (int) 60L;
    }

    public static int ENODATA() {
        return (int) 61L;
    }

    public static int ETIME() {
        return (int) 62L;
    }

    public static int ENOSR() {
        return (int) 63L;
    }

    public static int ENONET() {
        return (int) 64L;
    }

    public static int ENOPKG() {
        return (int) 65L;
    }

    public static int EREMOTE() {
        return (int) 66L;
    }

    public static int ENOLINK() {
        return (int) 67L;
    }

    public static int EADV() {
        return (int) 68L;
    }

    public static int ESRMNT() {
        return (int) 69L;
    }

    public static int ECOMM() {
        return (int) 70L;
    }

    public static int EPROTO() {
        return (int) 71L;
    }

    public static int EMULTIHOP() {
        return (int) 72L;
    }

    public static int EDOTDOT() {
        return (int) 73L;
    }

    public static int EBADMSG() {
        return (int) 74L;
    }

    public static int EOVERFLOW() {
        return (int) 75L;
    }

    public static int ENOTUNIQ() {
        return (int) 76L;
    }

    public static int EBADFD() {
        return (int) 77L;
    }

    public static int EREMCHG() {
        return (int) 78L;
    }

    public static int ELIBACC() {
        return (int) 79L;
    }

    public static int ELIBBAD() {
        return (int) 80L;
    }

    public static int ELIBSCN() {
        return (int) 81L;
    }

    public static int ELIBMAX() {
        return (int) 82L;
    }

    public static int ELIBEXEC() {
        return (int) 83L;
    }

    public static int EILSEQ() {
        return (int) 84L;
    }

    public static int ERESTART() {
        return (int) 85L;
    }

    public static int ESTRPIPE() {
        return (int) 86L;
    }

    public static int EUSERS() {
        return (int) 87L;
    }

    public static int ENOTSOCK() {
        return (int) 88L;
    }

    public static int EDESTADDRREQ() {
        return (int) 89L;
    }

    public static int EMSGSIZE() {
        return (int) 90L;
    }

    public static int EPROTOTYPE() {
        return (int) 91L;
    }

    public static int ENOPROTOOPT() {
        return (int) 92L;
    }

    public static int EPROTONOSUPPORT() {
        return (int) 93L;
    }

    public static int ESOCKTNOSUPPORT() {
        return (int) 94L;
    }

    public static int EOPNOTSUPP() {
        return (int) 95L;
    }

    public static int EPFNOSUPPORT() {
        return (int) 96L;
    }

    public static int EAFNOSUPPORT() {
        return (int) 97L;
    }

    public static int EADDRINUSE() {
        return (int) 98L;
    }

    public static int EADDRNOTAVAIL() {
        return (int) 99L;
    }

    public static int ENETDOWN() {
        return (int) 100L;
    }

    public static int ENETUNREACH() {
        return (int) 101L;
    }

    public static int ENETRESET() {
        return (int) 102L;
    }

    public static int ECONNABORTED() {
        return (int) 103L;
    }

    public static int ECONNRESET() {
        return (int) 104L;
    }

    public static int ENOBUFS() {
        return (int) 105L;
    }

    public static int EISCONN() {
        return (int) 106L;
    }

    public static int ENOTCONN() {
        return (int) 107L;
    }

    public static int ESHUTDOWN() {
        return (int) 108L;
    }

    public static int ETOOMANYREFS() {
        return (int) 109L;
    }

    public static int ETIMEDOUT() {
        return (int) 110L;
    }

    public static int ECONNREFUSED() {
        return (int) 111L;
    }

    public static int EHOSTDOWN() {
        return (int) 112L;
    }

    public static int EHOSTUNREACH() {
        return (int) 113L;
    }

    public static int EALREADY() {
        return (int) 114L;
    }

    public static int EINPROGRESS() {
        return (int) 115L;
    }

    public static int ESTALE() {
        return (int) 116L;
    }

    public static int EUCLEAN() {
        return (int) 117L;
    }

    public static int ENOTNAM() {
        return (int) 118L;
    }

    public static int ENAVAIL() {
        return (int) 119L;
    }

    public static int EISNAM() {
        return (int) 120L;
    }

    public static int EREMOTEIO() {
        return (int) 121L;
    }

    public static int EDQUOT() {
        return (int) 122L;
    }

    public static int ENOMEDIUM() {
        return (int) 123L;
    }

    public static int EMEDIUMTYPE() {
        return (int) 124L;
    }

    public static int ECANCELED() {
        return (int) 125L;
    }

    public static int ENOKEY() {
        return (int) 126L;
    }

    public static int EKEYEXPIRED() {
        return (int) 127L;
    }

    public static int EKEYREVOKED() {
        return (int) 128L;
    }

    public static int EKEYREJECTED() {
        return (int) 129L;
    }

    public static int EOWNERDEAD() {
        return (int) 130L;
    }

    public static int ENOTRECOVERABLE() {
        return (int) 131L;
    }

    public static int ERFKILL() {
        return (int) 132L;
    }

    public static int EHWPOISON() {
        return (int) 133L;
    }

    public static int _SYS_TIME_H() {
        return (int) 1L;
    }

    public static int _INTTYPES_H() {
        return (int) 1L;
    }

    public static int _STDINT_H() {
        return (int) 1L;
    }

    public static int _BITS_WCHAR_H() {
        return (int) 1L;
    }

    public static int _BITS_STDINT_UINTN_H() {
        return (int) 1L;
    }

    public static int ____gwchar_t_defined() {
        return (int) 1L;
    }

    public static int LIBRAW_MAX_METADATA_BLOCKS() {
        return (int) 1024L;
    }

    public static int LIBRAW_CBLACK_SIZE() {
        return (int) 4104L;
    }

    public static int LIBRAW_IFD_MAXCOUNT() {
        return (int) 10L;
    }

    public static int LIBRAW_CRXTRACKS_MAXCOUNT() {
        return (int) 16L;
    }

    public static int LIBRAW_AHD_TILE() {
        return (int) 512L;
    }

    public static int LIBRAW_XTRANS() {
        return (int) 9L;
    }

    public static int LIBRAW_PROGRESS_THUMB_MASK() {
        return (int) 268435455L;
    }

    public static int LIBRAW_MAJOR_VERSION() {
        return (int) 0L;
    }

    public static int LIBRAW_MINOR_VERSION() {
        return (int) 20L;
    }

    public static int LIBRAW_PATCH_VERSION() {
        return (int) 2L;
    }

    public static int LIBRAW_SHLIB_CURRENT() {
        return (int) 20L;
    }

    public static int LIBRAW_SHLIB_REVISION() {
        return (int) 0L;
    }

    public static int LIBRAW_SHLIB_AGE() {
        return (int) 0L;
    }

    public static int LibRawBigEndian() {
        return (int) 0L;
    }

    public static int LIBRAW_HISTOGRAM_SIZE() {
        return (int) 8192L;
    }

    public static MethodHandle memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$0.memcpy$MH, "memcpy");
    }

    public static MemoryAddress memcpy(Addressable __dest, Addressable __src, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.memcpy$MH, "memcpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__dest.address(), __src.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$0.memmove$MH, "memmove");
    }

    public static MemoryAddress memmove(Addressable __dest, Addressable __src, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.memmove$MH, "memmove");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__dest.address(), __src.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$0.memccpy$MH, "memccpy");
    }

    public static MemoryAddress memccpy(Addressable __dest, Addressable __src, int __c, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.memccpy$MH, "memccpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__dest.address(), __src.address(), __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle memset$MH() {
        return RuntimeHelper.requireNonNull(constants$0.memset$MH, "memset");
    }

    public static MemoryAddress memset(Addressable __s, int __c, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.memset$MH, "memset");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address(), __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0.memcmp$MH, "memcmp");
    }

    public static int memcmp(Addressable __s1, Addressable __s2, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.memcmp$MH, "memcmp");
        try {
            return (int) mh$.invokeExact(__s1.address(), __s2.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle memchr$MH() {
        return RuntimeHelper.requireNonNull(constants$0.memchr$MH, "memchr");
    }

    public static MemoryAddress memchr(Addressable __s, int __c, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.memchr$MH, "memchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address(), __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strcpy$MH, "strcpy");
    }

    public static MemoryAddress strcpy(Addressable __dest, Addressable __src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.strcpy$MH, "strcpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__dest.address(), __src.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strncpy$MH, "strncpy");
    }

    public static MemoryAddress strncpy(Addressable __dest, Addressable __src, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.strncpy$MH, "strncpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__dest.address(), __src.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strcat$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strcat$MH, "strcat");
    }

    public static MemoryAddress strcat(Addressable __dest, Addressable __src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.strcat$MH, "strcat");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__dest.address(), __src.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strncat$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strncat$MH, "strncat");
    }

    public static MemoryAddress strncat(Addressable __dest, Addressable __src, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.strncat$MH, "strncat");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__dest.address(), __src.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strcmp$MH, "strcmp");
    }

    public static int strcmp(Addressable __s1, Addressable __s2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.strcmp$MH, "strcmp");
        try {
            return (int) mh$.invokeExact(__s1.address(), __s2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strncmp$MH, "strncmp");
    }

    public static int strncmp(Addressable __s1, Addressable __s2, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.strncmp$MH, "strncmp");
        try {
            return (int) mh$.invokeExact(__s1.address(), __s2.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strcoll$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strcoll$MH, "strcoll");
    }

    public static int strcoll(Addressable __s1, Addressable __s2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.strcoll$MH, "strcoll");
        try {
            return (int) mh$.invokeExact(__s1.address(), __s2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strxfrm$MH, "strxfrm");
    }

    public static long strxfrm(Addressable __dest, Addressable __src, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.strxfrm$MH, "strxfrm");
        try {
            return (long) mh$.invokeExact(__dest.address(), __src.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strcoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strcoll_l$MH, "strcoll_l");
    }

    public static int strcoll_l(Addressable __s1, Addressable __s2, Addressable __l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.strcoll_l$MH, "strcoll_l");
        try {
            return (int) mh$.invokeExact(__s1.address(), __s2.address(), __l.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strxfrm_l$MH, "strxfrm_l");
    }

    public static long strxfrm_l(Addressable __dest, Addressable __src, long __n, Addressable __l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.strxfrm_l$MH, "strxfrm_l");
        try {
            return (long) mh$.invokeExact(__dest.address(), __src.address(), __n, __l.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strdup$MH, "strdup");
    }

    public static MemoryAddress strdup(Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.strdup$MH, "strdup");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strndup$MH, "strndup");
    }

    public static MemoryAddress strndup(Addressable __string, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.strndup$MH, "strndup");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__string.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$3.strchr$MH, "strchr");
    }

    public static MemoryAddress strchr(Addressable __s, int __c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.strchr$MH, "strchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address(), __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$3.strrchr$MH, "strrchr");
    }

    public static MemoryAddress strrchr(Addressable __s, int __c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.strrchr$MH, "strrchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address(), __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strcspn$MH() {
        return RuntimeHelper.requireNonNull(constants$3.strcspn$MH, "strcspn");
    }

    public static long strcspn(Addressable __s, Addressable __reject) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.strcspn$MH, "strcspn");
        try {
            return (long) mh$.invokeExact(__s.address(), __reject.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strspn$MH() {
        return RuntimeHelper.requireNonNull(constants$3.strspn$MH, "strspn");
    }

    public static long strspn(Addressable __s, Addressable __accept) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.strspn$MH, "strspn");
        try {
            return (long) mh$.invokeExact(__s.address(), __accept.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strpbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$3.strpbrk$MH, "strpbrk");
    }

    public static MemoryAddress strpbrk(Addressable __s, Addressable __accept) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.strpbrk$MH, "strpbrk");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address(), __accept.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$3.strstr$MH, "strstr");
    }

    public static MemoryAddress strstr(Addressable __haystack, Addressable __needle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.strstr$MH, "strstr");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__haystack.address(), __needle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strtok$MH() {
        return RuntimeHelper.requireNonNull(constants$4.strtok$MH, "strtok");
    }

    public static MemoryAddress strtok(Addressable __s, Addressable __delim) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.strtok$MH, "strtok");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address(), __delim.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$4.__strtok_r$MH, "__strtok_r");
    }

    public static MemoryAddress __strtok_r(Addressable __s, Addressable __delim, Addressable __save_ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.__strtok_r$MH, "__strtok_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address(), __delim.address(), __save_ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$4.strtok_r$MH, "strtok_r");
    }

    public static MemoryAddress strtok_r(Addressable __s, Addressable __delim, Addressable __save_ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.strtok_r$MH, "strtok_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address(), __delim.address(), __save_ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$4.strlen$MH, "strlen");
    }

    public static long strlen(Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.strlen$MH, "strlen");
        try {
            return (long) mh$.invokeExact(__s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$4.strnlen$MH, "strnlen");
    }

    public static long strnlen(Addressable __string, long __maxlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.strnlen$MH, "strnlen");
        try {
            return (long) mh$.invokeExact(__string.address(), __maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$4.strerror$MH, "strerror");
    }

    public static MemoryAddress strerror(int __errnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.strerror$MH, "strerror");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strerror_r$MH() {
        return RuntimeHelper.requireNonNull(constants$5.strerror_r$MH, "strerror_r");
    }

    public static int strerror_r(int __errnum, Addressable __buf, long __buflen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.strerror_r$MH, "strerror_r");
        try {
            return (int) mh$.invokeExact(__errnum, __buf.address(), __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strerror_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5.strerror_l$MH, "strerror_l");
    }

    public static MemoryAddress strerror_l(int __errnum, Addressable __l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.strerror_l$MH, "strerror_l");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__errnum, __l.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle bcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$5.bcmp$MH, "bcmp");
    }

    public static int bcmp(Addressable __s1, Addressable __s2, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.bcmp$MH, "bcmp");
        try {
            return (int) mh$.invokeExact(__s1.address(), __s2.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle bcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$5.bcopy$MH, "bcopy");
    }

    public static void bcopy(Addressable __src, Addressable __dest, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.bcopy$MH, "bcopy");
        try {
            mh$.invokeExact(__src.address(), __dest.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$5.bzero$MH, "bzero");
    }

    public static void bzero(Addressable __s, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.bzero$MH, "bzero");
        try {
            mh$.invokeExact(__s.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle index$MH() {
        return RuntimeHelper.requireNonNull(constants$5.index$MH, "index");
    }

    public static MemoryAddress index(Addressable __s, int __c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.index$MH, "index");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address(), __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rindex$MH() {
        return RuntimeHelper.requireNonNull(constants$6.rindex$MH, "rindex");
    }

    public static MemoryAddress rindex(Addressable __s, int __c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.rindex$MH, "rindex");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address(), __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ffs$MH() {
        return RuntimeHelper.requireNonNull(constants$6.ffs$MH, "ffs");
    }

    public static int ffs(int __i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.ffs$MH, "ffs");
        try {
            return (int) mh$.invokeExact(__i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ffsl$MH() {
        return RuntimeHelper.requireNonNull(constants$6.ffsl$MH, "ffsl");
    }

    public static int ffsl(long __l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.ffsl$MH, "ffsl");
        try {
            return (int) mh$.invokeExact(__l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ffsll$MH() {
        return RuntimeHelper.requireNonNull(constants$6.ffsll$MH, "ffsll");
    }

    public static int ffsll(long __ll) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.ffsll$MH, "ffsll");
        try {
            return (int) mh$.invokeExact(__ll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$6.strcasecmp$MH, "strcasecmp");
    }

    public static int strcasecmp(Addressable __s1, Addressable __s2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.strcasecmp$MH, "strcasecmp");
        try {
            return (int) mh$.invokeExact(__s1.address(), __s2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$6.strncasecmp$MH, "strncasecmp");
    }

    public static int strncasecmp(Addressable __s1, Addressable __s2, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.strncasecmp$MH, "strncasecmp");
        try {
            return (int) mh$.invokeExact(__s1.address(), __s2.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strcasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7.strcasecmp_l$MH, "strcasecmp_l");
    }

    public static int strcasecmp_l(Addressable __s1, Addressable __s2, Addressable __loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.strcasecmp_l$MH, "strcasecmp_l");
        try {
            return (int) mh$.invokeExact(__s1.address(), __s2.address(), __loc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strncasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7.strncasecmp_l$MH, "strncasecmp_l");
    }

    public static int strncasecmp_l(Addressable __s1, Addressable __s2, long __n, Addressable __loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.strncasecmp_l$MH, "strncasecmp_l");
        try {
            return (int) mh$.invokeExact(__s1.address(), __s2.address(), __n, __loc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle explicit_bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$7.explicit_bzero$MH, "explicit_bzero");
    }

    public static void explicit_bzero(Addressable __s, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.explicit_bzero$MH, "explicit_bzero");
        try {
            mh$.invokeExact(__s.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strsep$MH() {
        return RuntimeHelper.requireNonNull(constants$7.strsep$MH, "strsep");
    }

    public static MemoryAddress strsep(Addressable __stringp, Addressable __delim) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.strsep$MH, "strsep");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__stringp.address(), __delim.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$7.strsignal$MH, "strsignal");
    }

    public static MemoryAddress strsignal(int __sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.strsignal$MH, "strsignal");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$7.__stpcpy$MH, "__stpcpy");
    }

    public static MemoryAddress __stpcpy(Addressable __dest, Addressable __src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.__stpcpy$MH, "__stpcpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__dest.address(), __src.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$8.stpcpy$MH, "stpcpy");
    }

    public static MemoryAddress stpcpy(Addressable __dest, Addressable __src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.stpcpy$MH, "stpcpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__dest.address(), __src.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$8.__stpncpy$MH, "__stpncpy");
    }

    public static MemoryAddress __stpncpy(Addressable __dest, Addressable __src, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.__stpncpy$MH, "__stpncpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__dest.address(), __src.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$8.stpncpy$MH, "stpncpy");
    }

    public static MemoryAddress stpncpy(Addressable __dest, Addressable __src, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.stpncpy$MH, "stpncpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__dest.address(), __src.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MemoryLayout stdin$LAYOUT() {
        return constants$8.stdin$LAYOUT;
    }

    public static VarHandle stdin$VH() {
        return constants$8.stdin$VH;
    }

    public static MemorySegment stdin$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$8.stdin$SEGMENT, "stdin");
    }

    public static MemoryAddress stdin$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$8.stdin$VH.get(RuntimeHelper.requireNonNull(constants$8.stdin$SEGMENT, "stdin"));
    }

    public static void stdin$set(MemoryAddress x) {
        constants$8.stdin$VH.set(RuntimeHelper.requireNonNull(constants$8.stdin$SEGMENT, "stdin"), x);
    }

    public static MemoryLayout stdout$LAYOUT() {
        return constants$8.stdout$LAYOUT;
    }

    public static VarHandle stdout$VH() {
        return constants$8.stdout$VH;
    }

    public static MemorySegment stdout$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$8.stdout$SEGMENT, "stdout");
    }

    public static MemoryAddress stdout$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$8.stdout$VH.get(RuntimeHelper.requireNonNull(constants$8.stdout$SEGMENT, "stdout"));
    }

    public static void stdout$set(MemoryAddress x) {
        constants$8.stdout$VH.set(RuntimeHelper.requireNonNull(constants$8.stdout$SEGMENT, "stdout"), x);
    }

    public static MemoryLayout stderr$LAYOUT() {
        return constants$8.stderr$LAYOUT;
    }

    public static VarHandle stderr$VH() {
        return constants$8.stderr$VH;
    }

    public static MemorySegment stderr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$8.stderr$SEGMENT, "stderr");
    }

    public static MemoryAddress stderr$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$8.stderr$VH.get(RuntimeHelper.requireNonNull(constants$8.stderr$SEGMENT, "stderr"));
    }

    public static void stderr$set(MemoryAddress x) {
        constants$8.stderr$VH.set(RuntimeHelper.requireNonNull(constants$8.stderr$SEGMENT, "stderr"), x);
    }

    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$9.remove$MH, "remove");
    }

    public static int remove(Addressable __filename) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.remove$MH, "remove");
        try {
            return (int) mh$.invokeExact(__filename.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$9.rename$MH, "rename");
    }

    public static int rename(Addressable __old, Addressable __new) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.rename$MH, "rename");
        try {
            return (int) mh$.invokeExact(__old.address(), __new.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$9.renameat$MH, "renameat");
    }

    public static int renameat(int __oldfd, Addressable __old, int __newfd, Addressable __new) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.renameat$MH, "renameat");
        try {
            return (int) mh$.invokeExact(__oldfd, __old.address(), __newfd, __new.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$9.tmpfile$MH, "tmpfile");
    }

    public static MemoryAddress tmpfile() {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.tmpfile$MH, "tmpfile");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$9.tmpnam$MH, "tmpnam");
    }

    public static MemoryAddress tmpnam(Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.tmpnam$MH, "tmpnam");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tmpnam_r$MH() {
        return RuntimeHelper.requireNonNull(constants$9.tmpnam_r$MH, "tmpnam_r");
    }

    public static MemoryAddress tmpnam_r(Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.tmpnam_r$MH, "tmpnam_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$10.tempnam$MH, "tempnam");
    }

    public static MemoryAddress tempnam(Addressable __dir, Addressable __pfx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.tempnam$MH, "tempnam");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__dir.address(), __pfx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fclose$MH, "fclose");
    }

    public static int fclose(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.fclose$MH, "fclose");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fflush$MH, "fflush");
    }

    public static int fflush(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.fflush$MH, "fflush");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fflush_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fflush_unlocked$MH, "fflush_unlocked");
    }

    public static int fflush_unlocked(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.fflush_unlocked$MH, "fflush_unlocked");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fopen$MH, "fopen");
    }

    public static MemoryAddress fopen(Addressable __filename, Addressable __modes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.fopen$MH, "fopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__filename.address(), __modes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$10.freopen$MH, "freopen");
    }

    public static MemoryAddress freopen(Addressable __filename, Addressable __modes, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.freopen$MH, "freopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__filename.address(), __modes.address(), __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fdopen$MH, "fdopen");
    }

    public static MemoryAddress fdopen(int __fd, Addressable __modes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.fdopen$MH, "fdopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__fd, __modes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fmemopen$MH, "fmemopen");
    }

    public static MemoryAddress fmemopen(Addressable __s, long __len, Addressable __modes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.fmemopen$MH, "fmemopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address(), __len, __modes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$11.open_memstream$MH, "open_memstream");
    }

    public static MemoryAddress open_memstream(Addressable __bufloc, Addressable __sizeloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.open_memstream$MH, "open_memstream");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__bufloc.address(), __sizeloc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.setbuf$MH, "setbuf");
    }

    public static void setbuf(Addressable __stream, Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.setbuf$MH, "setbuf");
        try {
            mh$.invokeExact(__stream.address(), __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.setvbuf$MH, "setvbuf");
    }

    public static int setvbuf(Addressable __stream, Addressable __buf, int __modes, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.setvbuf$MH, "setvbuf");
        try {
            return (int) mh$.invokeExact(__stream.address(), __buf.address(), __modes, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$11.setbuffer$MH, "setbuffer");
    }

    public static void setbuffer(Addressable __stream, Addressable __buf, long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.setbuffer$MH, "setbuffer");
        try {
            mh$.invokeExact(__stream.address(), __buf.address(), __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.setlinebuf$MH, "setlinebuf");
    }

    public static void setlinebuf(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.setlinebuf$MH, "setlinebuf");
        try {
            mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.fprintf$MH, "fprintf");
    }

    public static int fprintf(Addressable __stream, Addressable __format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.fprintf$MH, "fprintf");
        try {
            return (int) mh$.invokeExact(__stream.address(), __format.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.printf$MH, "printf");
    }

    public static int printf(Addressable __format, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.printf$MH, "printf");
        try {
            return (int) mh$.invokeExact(__format.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.sprintf$MH, "sprintf");
    }

    public static int sprintf(Addressable __s, Addressable __format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.sprintf$MH, "sprintf");
        try {
            return (int) mh$.invokeExact(__s.address(), __format.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.vfprintf$MH, "vfprintf");
    }

    public static int vfprintf(Addressable __s, Addressable __format, Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.vfprintf$MH, "vfprintf");
        try {
            return (int) mh$.invokeExact(__s.address(), __format.address(), __arg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.vprintf$MH, "vprintf");
    }

    public static int vprintf(Addressable __format, Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.vprintf$MH, "vprintf");
        try {
            return (int) mh$.invokeExact(__format.address(), __arg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.vsprintf$MH, "vsprintf");
    }

    public static int vsprintf(Addressable __s, Addressable __format, Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.vsprintf$MH, "vsprintf");
        try {
            return (int) mh$.invokeExact(__s.address(), __format.address(), __arg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.snprintf$MH, "snprintf");
    }

    public static int snprintf(Addressable __s, long __maxlen, Addressable __format, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.snprintf$MH, "snprintf");
        try {
            return (int) mh$.invokeExact(__s.address(), __maxlen, __format.address(), x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.vsnprintf$MH, "vsnprintf");
    }

    public static int vsnprintf(Addressable __s, long __maxlen, Addressable __format, Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.vsnprintf$MH, "vsnprintf");
        try {
            return (int) mh$.invokeExact(__s.address(), __maxlen, __format.address(), __arg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.vdprintf$MH, "vdprintf");
    }

    public static int vdprintf(int __fd, Addressable __fmt, Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.vdprintf$MH, "vdprintf");
        try {
            return (int) mh$.invokeExact(__fd, __fmt.address(), __arg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.dprintf$MH, "dprintf");
    }

    public static int dprintf(int __fd, Addressable __fmt, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.dprintf$MH, "dprintf");
        try {
            return (int) mh$.invokeExact(__fd, __fmt.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fscanf$MH, "fscanf");
    }

    public static int fscanf(Addressable __stream, Addressable __format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.fscanf$MH, "fscanf");
        try {
            return (int) mh$.invokeExact(__stream.address(), __format.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.scanf$MH, "scanf");
    }

    public static int scanf(Addressable __format, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.scanf$MH, "scanf");
        try {
            return (int) mh$.invokeExact(__format.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.sscanf$MH, "sscanf");
    }

    public static int sscanf(Addressable __s, Addressable __format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.sscanf$MH, "sscanf");
        try {
            return (int) mh$.invokeExact(__s.address(), __format.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.vfscanf$MH, "vfscanf");
    }

    public static int vfscanf(Addressable __s, Addressable __format, Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.vfscanf$MH, "vfscanf");
        try {
            return (int) mh$.invokeExact(__s.address(), __format.address(), __arg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.vscanf$MH, "vscanf");
    }

    public static int vscanf(Addressable __format, Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.vscanf$MH, "vscanf");
        try {
            return (int) mh$.invokeExact(__format.address(), __arg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.vsscanf$MH, "vsscanf");
    }

    public static int vsscanf(Addressable __s, Addressable __format, Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.vsscanf$MH, "vsscanf");
        try {
            return (int) mh$.invokeExact(__s.address(), __format.address(), __arg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fgetc$MH, "fgetc");
    }

    public static int fgetc(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.fgetc$MH, "fgetc");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$15.getc$MH, "getc");
    }

    public static int getc(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.getc$MH, "getc");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$15.getchar$MH, "getchar");
    }

    public static int getchar() {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.getchar$MH, "getchar");
        try {
            return (int) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$15.getc_unlocked$MH, "getc_unlocked");
    }

    public static int getc_unlocked(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.getc_unlocked$MH, "getc_unlocked");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$15.getchar_unlocked$MH, "getchar_unlocked");
    }

    public static int getchar_unlocked() {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.getchar_unlocked$MH, "getchar_unlocked");
        try {
            return (int) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fgetc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$15.fgetc_unlocked$MH, "fgetc_unlocked");
    }

    public static int fgetc_unlocked(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.fgetc_unlocked$MH, "fgetc_unlocked");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$15.fputc$MH, "fputc");
    }

    public static int fputc(int __c, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.fputc$MH, "fputc");
        try {
            return (int) mh$.invokeExact(__c, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$16.putc$MH, "putc");
    }

    public static int putc(int __c, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.putc$MH, "putc");
        try {
            return (int) mh$.invokeExact(__c, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$16.putchar$MH, "putchar");
    }

    public static int putchar(int __c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.putchar$MH, "putchar");
        try {
            return (int) mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fputc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fputc_unlocked$MH, "fputc_unlocked");
    }

    public static int fputc_unlocked(int __c, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.fputc_unlocked$MH, "fputc_unlocked");
        try {
            return (int) mh$.invokeExact(__c, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$16.putc_unlocked$MH, "putc_unlocked");
    }

    public static int putc_unlocked(int __c, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.putc_unlocked$MH, "putc_unlocked");
        try {
            return (int) mh$.invokeExact(__c, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$16.putchar_unlocked$MH, "putchar_unlocked");
    }

    public static int putchar_unlocked(int __c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.putchar_unlocked$MH, "putchar_unlocked");
        try {
            return (int) mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$16.getw$MH, "getw");
    }

    public static int getw(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.getw$MH, "getw");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$17.putw$MH, "putw");
    }

    public static int putw(int __w, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.putw$MH, "putw");
        try {
            return (int) mh$.invokeExact(__w, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fgets$MH, "fgets");
    }

    public static MemoryAddress fgets(Addressable __s, int __n, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.fgets$MH, "fgets");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address(), __n, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$17.__getdelim$MH, "__getdelim");
    }

    public static long __getdelim(Addressable __lineptr, Addressable __n, int __delimiter, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.__getdelim$MH, "__getdelim");
        try {
            return (long) mh$.invokeExact(__lineptr.address(), __n.address(), __delimiter, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$17.getdelim$MH, "getdelim");
    }

    public static long getdelim(Addressable __lineptr, Addressable __n, int __delimiter, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.getdelim$MH, "getdelim");
        try {
            return (long) mh$.invokeExact(__lineptr.address(), __n.address(), __delimiter, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$17.getline$MH, "getline");
    }

    public static long getline(Addressable __lineptr, Addressable __n, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.getline$MH, "getline");
        try {
            return (long) mh$.invokeExact(__lineptr.address(), __n.address(), __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fputs$MH, "fputs");
    }

    public static int fputs(Addressable __s, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.fputs$MH, "fputs");
        try {
            return (int) mh$.invokeExact(__s.address(), __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$18.puts$MH, "puts");
    }

    public static int puts(Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.puts$MH, "puts");
        try {
            return (int) mh$.invokeExact(__s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$18.ungetc$MH, "ungetc");
    }

    public static int ungetc(int __c, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.ungetc$MH, "ungetc");
        try {
            return (int) mh$.invokeExact(__c, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fread$MH, "fread");
    }

    public static long fread(Addressable __ptr, long __size, long __n, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.fread$MH, "fread");
        try {
            return (long) mh$.invokeExact(__ptr.address(), __size, __n, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fwrite$MH, "fwrite");
    }

    public static long fwrite(Addressable __ptr, long __size, long __n, Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.fwrite$MH, "fwrite");
        try {
            return (long) mh$.invokeExact(__ptr.address(), __size, __n, __s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fread_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fread_unlocked$MH, "fread_unlocked");
    }

    public static long fread_unlocked(Addressable __ptr, long __size, long __n, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.fread_unlocked$MH, "fread_unlocked");
        try {
            return (long) mh$.invokeExact(__ptr.address(), __size, __n, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fwrite_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fwrite_unlocked$MH, "fwrite_unlocked");
    }

    public static long fwrite_unlocked(Addressable __ptr, long __size, long __n, Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.fwrite_unlocked$MH, "fwrite_unlocked");
        try {
            return (long) mh$.invokeExact(__ptr.address(), __size, __n, __stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fseek$MH, "fseek");
    }

    public static int fseek(Addressable __stream, long __off, int __whence) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.fseek$MH, "fseek");
        try {
            return (int) mh$.invokeExact(__stream.address(), __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$19.ftell$MH, "ftell");
    }

    public static long ftell(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.ftell$MH, "ftell");
        try {
            return (long) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$19.rewind$MH, "rewind");
    }

    public static void rewind(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.rewind$MH, "rewind");
        try {
            mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fseeko$MH, "fseeko");
    }

    public static int fseeko(Addressable __stream, long __off, int __whence) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.fseeko$MH, "fseeko");
        try {
            return (int) mh$.invokeExact(__stream.address(), __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$19.ftello$MH, "ftello");
    }

    public static long ftello(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.ftello$MH, "ftello");
        try {
            return (long) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fgetpos$MH, "fgetpos");
    }

    public static int fgetpos(Addressable __stream, Addressable __pos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.fgetpos$MH, "fgetpos");
        try {
            return (int) mh$.invokeExact(__stream.address(), __pos.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$20.fsetpos$MH, "fsetpos");
    }

    public static int fsetpos(Addressable __stream, Addressable __pos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.fsetpos$MH, "fsetpos");
        try {
            return (int) mh$.invokeExact(__stream.address(), __pos.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$20.clearerr$MH, "clearerr");
    }

    public static void clearerr(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.clearerr$MH, "clearerr");
        try {
            mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$20.feof$MH, "feof");
    }

    public static int feof(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.feof$MH, "feof");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$20.ferror$MH, "ferror");
    }

    public static int ferror(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.ferror$MH, "ferror");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle clearerr_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$20.clearerr_unlocked$MH, "clearerr_unlocked");
    }

    public static void clearerr_unlocked(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.clearerr_unlocked$MH, "clearerr_unlocked");
        try {
            mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle feof_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$20.feof_unlocked$MH, "feof_unlocked");
    }

    public static int feof_unlocked(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.feof_unlocked$MH, "feof_unlocked");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ferror_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$21.ferror_unlocked$MH, "ferror_unlocked");
    }

    public static int ferror_unlocked(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.ferror_unlocked$MH, "ferror_unlocked");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$21.perror$MH, "perror");
    }

    public static void perror(Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.perror$MH, "perror");
        try {
            mh$.invokeExact(__s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$21.fileno$MH, "fileno");
    }

    public static int fileno(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.fileno$MH, "fileno");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fileno_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$21.fileno_unlocked$MH, "fileno_unlocked");
    }

    public static int fileno_unlocked(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.fileno_unlocked$MH, "fileno_unlocked");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$21.popen$MH, "popen");
    }

    public static MemoryAddress popen(Addressable __command, Addressable __modes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.popen$MH, "popen");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__command.address(), __modes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$21.pclose$MH, "pclose");
    }

    public static int pclose(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.pclose$MH, "pclose");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$22.ctermid$MH, "ctermid");
    }

    public static MemoryAddress ctermid(Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.ctermid$MH, "ctermid");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$22.flockfile$MH, "flockfile");
    }

    public static void flockfile(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.flockfile$MH, "flockfile");
        try {
            mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$22.ftrylockfile$MH, "ftrylockfile");
    }

    public static int ftrylockfile(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.ftrylockfile$MH, "ftrylockfile");
        try {
            return (int) mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$22.funlockfile$MH, "funlockfile");
    }

    public static void funlockfile(Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.funlockfile$MH, "funlockfile");
        try {
            mh$.invokeExact(__stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __uflow$MH() {
        return RuntimeHelper.requireNonNull(constants$22.__uflow$MH, "__uflow");
    }

    public static int __uflow(Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.__uflow$MH, "__uflow");
        try {
            return (int) mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$22.__overflow$MH, "__overflow");
    }

    public static int __overflow(Addressable x0, int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.__overflow$MH, "__overflow");
        try {
            return (int) mh$.invokeExact(x0.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$23.__ctype_get_mb_cur_max$MH, "__ctype_get_mb_cur_max");
    }

    public static long __ctype_get_mb_cur_max() {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.__ctype_get_mb_cur_max$MH, "__ctype_get_mb_cur_max");
        try {
            return (long) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$23.atof$MH, "atof");
    }

    public static double atof(Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.atof$MH, "atof");
        try {
            return (double) mh$.invokeExact(__nptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$23.atoi$MH, "atoi");
    }

    public static int atoi(Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.atoi$MH, "atoi");
        try {
            return (int) mh$.invokeExact(__nptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$23.atol$MH, "atol");
    }

    public static long atol(Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.atol$MH, "atol");
        try {
            return (long) mh$.invokeExact(__nptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$23.atoll$MH, "atoll");
    }

    public static long atoll(Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.atoll$MH, "atoll");
        try {
            return (long) mh$.invokeExact(__nptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$23.strtod$MH, "strtod");
    }

    public static double strtod(Addressable __nptr, Addressable __endptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.strtod$MH, "strtod");
        try {
            return (double) mh$.invokeExact(__nptr.address(), __endptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$24.strtof$MH, "strtof");
    }

    public static float strtof(Addressable __nptr, Addressable __endptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.strtof$MH, "strtof");
        try {
            return (float) mh$.invokeExact(__nptr.address(), __endptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$24.strtol$MH, "strtol");
    }

    public static long strtol(Addressable __nptr, Addressable __endptr, int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.strtol$MH, "strtol");
        try {
            return (long) mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$24.strtoul$MH, "strtoul");
    }

    public static long strtoul(Addressable __nptr, Addressable __endptr, int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.strtoul$MH, "strtoul");
        try {
            return (long) mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$24.strtoq$MH, "strtoq");
    }

    public static long strtoq(Addressable __nptr, Addressable __endptr, int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.strtoq$MH, "strtoq");
        try {
            return (long) mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$24.strtouq$MH, "strtouq");
    }

    public static long strtouq(Addressable __nptr, Addressable __endptr, int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.strtouq$MH, "strtouq");
        try {
            return (long) mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$24.strtoll$MH, "strtoll");
    }

    public static long strtoll(Addressable __nptr, Addressable __endptr, int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.strtoll$MH, "strtoll");
        try {
            return (long) mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$25.strtoull$MH, "strtoull");
    }

    public static long strtoull(Addressable __nptr, Addressable __endptr, int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.strtoull$MH, "strtoull");
        try {
            return (long) mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$25.l64a$MH, "l64a");
    }

    public static MemoryAddress l64a(long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.l64a$MH, "l64a");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$25.a64l$MH, "a64l");
    }

    public static long a64l(Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.a64l$MH, "a64l");
        try {
            return (long) mh$.invokeExact(__s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$25.__bswap_16$MH, "__bswap_16");
    }

    public static short __bswap_16(short __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.__bswap_16$MH, "__bswap_16");
        try {
            return (short) mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$25.__bswap_32$MH, "__bswap_32");
    }

    public static int __bswap_32(int __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.__bswap_32$MH, "__bswap_32");
        try {
            return (int) mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$25.__bswap_64$MH, "__bswap_64");
    }

    public static long __bswap_64(long __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.__bswap_64$MH, "__bswap_64");
        try {
            return (long) mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$26.__uint16_identity$MH, "__uint16_identity");
    }

    public static short __uint16_identity(short __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.__uint16_identity$MH, "__uint16_identity");
        try {
            return (short) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$26.__uint32_identity$MH, "__uint32_identity");
    }

    public static int __uint32_identity(int __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.__uint32_identity$MH, "__uint32_identity");
        try {
            return (int) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$26.__uint64_identity$MH, "__uint64_identity");
    }

    public static long __uint64_identity(long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.__uint64_identity$MH, "__uint64_identity");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$26.select$MH, "select");
    }

    public static int select(int __nfds, Addressable __readfds, Addressable __writefds, Addressable __exceptfds, Addressable __timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.select$MH, "select");
        try {
            return (int) mh$.invokeExact(__nfds, __readfds.address(), __writefds.address(), __exceptfds.address(), __timeout.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$26.pselect$MH, "pselect");
    }

    public static int pselect(int __nfds, Addressable __readfds, Addressable __writefds, Addressable __exceptfds, Addressable __timeout, Addressable __sigmask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.pselect$MH, "pselect");
        try {
            return (int) mh$.invokeExact(__nfds, __readfds.address(), __writefds.address(), __exceptfds.address(), __timeout.address(), __sigmask.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$26.random$MH, "random");
    }

    public static long random() {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.random$MH, "random");
        try {
            return (long) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$27.srandom$MH, "srandom");
    }

    public static void srandom(int __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.srandom$MH, "srandom");
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$27.initstate$MH, "initstate");
    }

    public static MemoryAddress initstate(int __seed, Addressable __statebuf, long __statelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.initstate$MH, "initstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__seed, __statebuf.address(), __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$27.setstate$MH, "setstate");
    }

    public static MemoryAddress setstate(Addressable __statebuf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.setstate$MH, "setstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__statebuf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$27.random_r$MH, "random_r");
    }

    public static int random_r(Addressable __buf, Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.random_r$MH, "random_r");
        try {
            return (int) mh$.invokeExact(__buf.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$27.srandom_r$MH, "srandom_r");
    }

    public static int srandom_r(int __seed, Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.srandom_r$MH, "srandom_r");
        try {
            return (int) mh$.invokeExact(__seed, __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$27.initstate_r$MH, "initstate_r");
    }

    public static int initstate_r(int __seed, Addressable __statebuf, long __statelen, Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.initstate_r$MH, "initstate_r");
        try {
            return (int) mh$.invokeExact(__seed, __statebuf.address(), __statelen, __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setstate_r$MH, "setstate_r");
    }

    public static int setstate_r(Addressable __statebuf, Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.setstate_r$MH, "setstate_r");
        try {
            return (int) mh$.invokeExact(__statebuf.address(), __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$28.rand$MH, "rand");
    }

    public static int rand() {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.rand$MH, "rand");
        try {
            return (int) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$28.srand$MH, "srand");
    }

    public static void srand(int __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.srand$MH, "srand");
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$28.rand_r$MH, "rand_r");
    }

    public static int rand_r(Addressable __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.rand_r$MH, "rand_r");
        try {
            return (int) mh$.invokeExact(__seed.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$28.drand48$MH, "drand48");
    }

    public static double drand48() {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.drand48$MH, "drand48");
        try {
            return (double) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$28.erand48$MH, "erand48");
    }

    public static double erand48(Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.erand48$MH, "erand48");
        try {
            return (double) mh$.invokeExact(__xsubi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$29.lrand48$MH, "lrand48");
    }

    public static long lrand48() {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.lrand48$MH, "lrand48");
        try {
            return (long) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$29.nrand48$MH, "nrand48");
    }

    public static long nrand48(Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.nrand48$MH, "nrand48");
        try {
            return (long) mh$.invokeExact(__xsubi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$29.mrand48$MH, "mrand48");
    }

    public static long mrand48() {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.mrand48$MH, "mrand48");
        try {
            return (long) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$29.jrand48$MH, "jrand48");
    }

    public static long jrand48(Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.jrand48$MH, "jrand48");
        try {
            return (long) mh$.invokeExact(__xsubi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$29.srand48$MH, "srand48");
    }

    public static void srand48(long __seedval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.srand48$MH, "srand48");
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$29.seed48$MH, "seed48");
    }

    public static MemoryAddress seed48(Addressable __seed16v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.seed48$MH, "seed48");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__seed16v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$30.lcong48$MH, "lcong48");
    }

    public static void lcong48(Addressable __param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.lcong48$MH, "lcong48");
        try {
            mh$.invokeExact(__param.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$30.drand48_r$MH, "drand48_r");
    }

    public static int drand48_r(Addressable __buffer, Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.drand48_r$MH, "drand48_r");
        try {
            return (int) mh$.invokeExact(__buffer.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$30.erand48_r$MH, "erand48_r");
    }

    public static int erand48_r(Addressable __xsubi, Addressable __buffer, Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.erand48_r$MH, "erand48_r");
        try {
            return (int) mh$.invokeExact(__xsubi.address(), __buffer.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$30.lrand48_r$MH, "lrand48_r");
    }

    public static int lrand48_r(Addressable __buffer, Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.lrand48_r$MH, "lrand48_r");
        try {
            return (int) mh$.invokeExact(__buffer.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$30.nrand48_r$MH, "nrand48_r");
    }

    public static int nrand48_r(Addressable __xsubi, Addressable __buffer, Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.nrand48_r$MH, "nrand48_r");
        try {
            return (int) mh$.invokeExact(__xsubi.address(), __buffer.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$30.mrand48_r$MH, "mrand48_r");
    }

    public static int mrand48_r(Addressable __buffer, Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.mrand48_r$MH, "mrand48_r");
        try {
            return (int) mh$.invokeExact(__buffer.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$31.jrand48_r$MH, "jrand48_r");
    }

    public static int jrand48_r(Addressable __xsubi, Addressable __buffer, Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.jrand48_r$MH, "jrand48_r");
        try {
            return (int) mh$.invokeExact(__xsubi.address(), __buffer.address(), __result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$31.srand48_r$MH, "srand48_r");
    }

    public static int srand48_r(long __seedval, Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.srand48_r$MH, "srand48_r");
        try {
            return (int) mh$.invokeExact(__seedval, __buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$31.seed48_r$MH, "seed48_r");
    }

    public static int seed48_r(Addressable __seed16v, Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.seed48_r$MH, "seed48_r");
        try {
            return (int) mh$.invokeExact(__seed16v.address(), __buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$31.lcong48_r$MH, "lcong48_r");
    }

    public static int lcong48_r(Addressable __param, Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.lcong48_r$MH, "lcong48_r");
        try {
            return (int) mh$.invokeExact(__param.address(), __buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$31.malloc$MH, "malloc");
    }

    public static MemoryAddress malloc(long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.malloc$MH, "malloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$31.calloc$MH, "calloc");
    }

    public static MemoryAddress calloc(long __nmemb, long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.calloc$MH, "calloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$32.realloc$MH, "realloc");
    }

    public static MemoryAddress realloc(Addressable __ptr, long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.realloc$MH, "realloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__ptr.address(), __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$32.reallocarray$MH, "reallocarray");
    }

    public static MemoryAddress reallocarray(Addressable __ptr, long __nmemb, long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.reallocarray$MH, "reallocarray");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__ptr.address(), __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$32.free$MH, "free");
    }

    public static void free(Addressable __ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.free$MH, "free");
        try {
            mh$.invokeExact(__ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$32.alloca$MH, "alloca");
    }

    public static MemoryAddress alloca(long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.alloca$MH, "alloca");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$32.valloc$MH, "valloc");
    }

    public static MemoryAddress valloc(long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.valloc$MH, "valloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$32.posix_memalign$MH, "posix_memalign");
    }

    public static int posix_memalign(Addressable __memptr, long __alignment, long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.posix_memalign$MH, "posix_memalign");
        try {
            return (int) mh$.invokeExact(__memptr.address(), __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$33.aligned_alloc$MH, "aligned_alloc");
    }

    public static MemoryAddress aligned_alloc(long __alignment, long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.aligned_alloc$MH, "aligned_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$33.abort$MH, "abort");
    }

    public static void abort() {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.abort$MH, "abort");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$33.atexit$MH, "atexit");
    }

    public static int atexit(Addressable __func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.atexit$MH, "atexit");
        try {
            return (int) mh$.invokeExact(__func.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$34.at_quick_exit$MH, "at_quick_exit");
    }

    public static int at_quick_exit(Addressable __func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.at_quick_exit$MH, "at_quick_exit");
        try {
            return (int) mh$.invokeExact(__func.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$34.on_exit$MH, "on_exit");
    }

    public static int on_exit(Addressable __func, Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.on_exit$MH, "on_exit");
        try {
            return (int) mh$.invokeExact(__func.address(), __arg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$34.exit$MH, "exit");
    }

    public static void exit(int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.exit$MH, "exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$35.quick_exit$MH, "quick_exit");
    }

    public static void quick_exit(int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.quick_exit$MH, "quick_exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$35._Exit$MH, "_Exit");
    }

    public static void _Exit(int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35._Exit$MH, "_Exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.getenv$MH, "getenv");
    }

    public static MemoryAddress getenv(Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.getenv$MH, "getenv");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.putenv$MH, "putenv");
    }

    public static int putenv(Addressable __string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.putenv$MH, "putenv");
        try {
            return (int) mh$.invokeExact(__string.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.setenv$MH, "setenv");
    }

    public static int setenv(Addressable __name, Addressable __value, int __replace) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.setenv$MH, "setenv");
        try {
            return (int) mh$.invokeExact(__name.address(), __value.address(), __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.unsetenv$MH, "unsetenv");
    }

    public static int unsetenv(Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.unsetenv$MH, "unsetenv");
        try {
            return (int) mh$.invokeExact(__name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$36.clearenv$MH, "clearenv");
    }

    public static int clearenv() {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.clearenv$MH, "clearenv");
        try {
            return (int) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$36.mktemp$MH, "mktemp");
    }

    public static MemoryAddress mktemp(Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.mktemp$MH, "mktemp");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__template.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$36.mkstemp$MH, "mkstemp");
    }

    public static int mkstemp(Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.mkstemp$MH, "mkstemp");
        try {
            return (int) mh$.invokeExact(__template.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$36.mkstemps$MH, "mkstemps");
    }

    public static int mkstemps(Addressable __template, int __suffixlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.mkstemps$MH, "mkstemps");
        try {
            return (int) mh$.invokeExact(__template.address(), __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$36.mkdtemp$MH, "mkdtemp");
    }

    public static MemoryAddress mkdtemp(Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.mkdtemp$MH, "mkdtemp");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__template.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$36.system$MH, "system");
    }

    public static int system(Addressable __command) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.system$MH, "system");
        try {
            return (int) mh$.invokeExact(__command.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$37.realpath$MH, "realpath");
    }

    public static MemoryAddress realpath(Addressable __name, Addressable __resolved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.realpath$MH, "realpath");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__name.address(), __resolved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$37.bsearch$MH, "bsearch");
    }

    public static MemoryAddress bsearch(Addressable __key, Addressable __base, long __nmemb, long __size, Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.bsearch$MH, "bsearch");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__key.address(), __base.address(), __nmemb, __size, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$37.qsort$MH, "qsort");
    }

    public static void qsort(Addressable __base, long __nmemb, long __size, Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.qsort$MH, "qsort");
        try {
            mh$.invokeExact(__base.address(), __nmemb, __size, __compar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$37.abs$MH, "abs");
    }

    public static int abs(int __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.abs$MH, "abs");
        try {
            return (int) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$38.labs$MH, "labs");
    }

    public static long labs(long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.labs$MH, "labs");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$38.llabs$MH, "llabs");
    }

    public static long llabs(long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.llabs$MH, "llabs");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$38.div$MH, "div");
    }

    public static MemorySegment div(SegmentAllocator allocator, int __numer, int __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.div$MH, "div");
        try {
            return (jdk.incubator.foreign.MemorySegment) mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MemorySegment div(ResourceScope scope, int __numer, int __denom) {
        return div(SegmentAllocator.ofScope(scope), __numer, __denom);
    }

    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.ldiv$MH, "ldiv");
    }

    public static MemorySegment ldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.ldiv$MH, "ldiv");
        try {
            return (jdk.incubator.foreign.MemorySegment) mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MemorySegment ldiv(ResourceScope scope, long __numer, long __denom) {
        return ldiv(SegmentAllocator.ofScope(scope), __numer, __denom);
    }

    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.lldiv$MH, "lldiv");
    }

    public static MemorySegment lldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.lldiv$MH, "lldiv");
        try {
            return (jdk.incubator.foreign.MemorySegment) mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MemorySegment lldiv(ResourceScope scope, long __numer, long __denom) {
        return lldiv(SegmentAllocator.ofScope(scope), __numer, __denom);
    }

    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$38.ecvt$MH, "ecvt");
    }

    public static MemoryAddress ecvt(double __value, int __ndigit, Addressable __decpt, Addressable __sign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.ecvt$MH, "ecvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__value, __ndigit, __decpt.address(), __sign.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$39.fcvt$MH, "fcvt");
    }

    public static MemoryAddress fcvt(double __value, int __ndigit, Addressable __decpt, Addressable __sign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.fcvt$MH, "fcvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__value, __ndigit, __decpt.address(), __sign.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$39.gcvt$MH, "gcvt");
    }

    public static MemoryAddress gcvt(double __value, int __ndigit, Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.gcvt$MH, "gcvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact(__value, __ndigit, __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$39.ecvt_r$MH, "ecvt_r");
    }

    public static int ecvt_r(double __value, int __ndigit, Addressable __decpt, Addressable __sign, Addressable __buf, long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.ecvt_r$MH, "ecvt_r");
        try {
            return (int) mh$.invokeExact(__value, __ndigit, __decpt.address(), __sign.address(), __buf.address(), __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$39.fcvt_r$MH, "fcvt_r");
    }

    public static int fcvt_r(double __value, int __ndigit, Addressable __decpt, Addressable __sign, Addressable __buf, long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.fcvt_r$MH, "fcvt_r");
        try {
            return (int) mh$.invokeExact(__value, __ndigit, __decpt.address(), __sign.address(), __buf.address(), __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$39.mblen$MH, "mblen");
    }

    public static int mblen(Addressable __s, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.mblen$MH, "mblen");
        try {
            return (int) mh$.invokeExact(__s.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$39.mbtowc$MH, "mbtowc");
    }

    public static int mbtowc(Addressable __pwc, Addressable __s, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.mbtowc$MH, "mbtowc");
        try {
            return (int) mh$.invokeExact(__pwc.address(), __s.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$40.wctomb$MH, "wctomb");
    }

    public static int wctomb(Addressable __s, int __wchar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.wctomb$MH, "wctomb");
        try {
            return (int) mh$.invokeExact(__s.address(), __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$40.mbstowcs$MH, "mbstowcs");
    }

    public static long mbstowcs(Addressable __pwcs, Addressable __s, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.mbstowcs$MH, "mbstowcs");
        try {
            return (long) mh$.invokeExact(__pwcs.address(), __s.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$40.wcstombs$MH, "wcstombs");
    }

    public static long wcstombs(Addressable __s, Addressable __pwcs, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.wcstombs$MH, "wcstombs");
        try {
            return (long) mh$.invokeExact(__s.address(), __pwcs.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$40.rpmatch$MH, "rpmatch");
    }

    public static int rpmatch(Addressable __response) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.rpmatch$MH, "rpmatch");
        try {
            return (int) mh$.invokeExact(__response.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$40.getsubopt$MH, "getsubopt");
    }

    public static int getsubopt(Addressable __optionp, Addressable __tokens, Addressable __valuep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.getsubopt$MH, "getsubopt");
        try {
            return (int) mh$.invokeExact(__optionp.address(), __tokens.address(), __valuep.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$40.getloadavg$MH, "getloadavg");
    }

    public static int getloadavg(Addressable __loadavg, int __nelem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.getloadavg$MH, "getloadavg");
        try {
            return (int) mh$.invokeExact(__loadavg.address(), __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fpclassify$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__fpclassify$MH, "__fpclassify");
    }

    public static int __fpclassify(double __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.__fpclassify$MH, "__fpclassify");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __signbit$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__signbit$MH, "__signbit");
    }

    public static int __signbit(double __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.__signbit$MH, "__signbit");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __isinf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__isinf$MH, "__isinf");
    }

    public static int __isinf(double __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.__isinf$MH, "__isinf");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __finite$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__finite$MH, "__finite");
    }

    public static int __finite(double __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.__finite$MH, "__finite");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __isnan$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__isnan$MH, "__isnan");
    }

    public static int __isnan(double __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.__isnan$MH, "__isnan");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __iseqsig$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__iseqsig$MH, "__iseqsig");
    }

    public static int __iseqsig(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.__iseqsig$MH, "__iseqsig");
        try {
            return (int) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __issignaling$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__issignaling$MH, "__issignaling");
    }

    public static int __issignaling(double __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.__issignaling$MH, "__issignaling");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle acos$MH() {
        return RuntimeHelper.requireNonNull(constants$42.acos$MH, "acos");
    }

    public static double acos(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.acos$MH, "acos");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __acos$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__acos$MH, "__acos");
    }

    public static double __acos(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.__acos$MH, "__acos");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle asin$MH() {
        return RuntimeHelper.requireNonNull(constants$42.asin$MH, "asin");
    }

    public static double asin(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.asin$MH, "asin");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __asin$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__asin$MH, "__asin");
    }

    public static double __asin(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.__asin$MH, "__asin");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atan$MH() {
        return RuntimeHelper.requireNonNull(constants$42.atan$MH, "atan");
    }

    public static double atan(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.atan$MH, "atan");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __atan$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__atan$MH, "__atan");
    }

    public static double __atan(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.__atan$MH, "__atan");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$43.atan2$MH, "atan2");
    }

    public static double atan2(double __y, double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.atan2$MH, "atan2");
        try {
            return (double) mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__atan2$MH, "__atan2");
    }

    public static double __atan2(double __y, double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.__atan2$MH, "__atan2");
        try {
            return (double) mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle cos$MH() {
        return RuntimeHelper.requireNonNull(constants$43.cos$MH, "cos");
    }

    public static double cos(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.cos$MH, "cos");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __cos$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__cos$MH, "__cos");
    }

    public static double __cos(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.__cos$MH, "__cos");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sin$MH() {
        return RuntimeHelper.requireNonNull(constants$43.sin$MH, "sin");
    }

    public static double sin(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.sin$MH, "sin");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __sin$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__sin$MH, "__sin");
    }

    public static double __sin(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.__sin$MH, "__sin");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tan$MH() {
        return RuntimeHelper.requireNonNull(constants$44.tan$MH, "tan");
    }

    public static double tan(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.tan$MH, "tan");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __tan$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__tan$MH, "__tan");
    }

    public static double __tan(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.__tan$MH, "__tan");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle cosh$MH() {
        return RuntimeHelper.requireNonNull(constants$44.cosh$MH, "cosh");
    }

    public static double cosh(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.cosh$MH, "cosh");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __cosh$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__cosh$MH, "__cosh");
    }

    public static double __cosh(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.__cosh$MH, "__cosh");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sinh$MH() {
        return RuntimeHelper.requireNonNull(constants$44.sinh$MH, "sinh");
    }

    public static double sinh(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.sinh$MH, "sinh");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __sinh$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__sinh$MH, "__sinh");
    }

    public static double __sinh(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.__sinh$MH, "__sinh");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$45.tanh$MH, "tanh");
    }

    public static double tanh(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.tanh$MH, "tanh");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__tanh$MH, "__tanh");
    }

    public static double __tanh(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.__tanh$MH, "__tanh");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle acosh$MH() {
        return RuntimeHelper.requireNonNull(constants$45.acosh$MH, "acosh");
    }

    public static double acosh(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.acosh$MH, "acosh");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __acosh$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__acosh$MH, "__acosh");
    }

    public static double __acosh(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.__acosh$MH, "__acosh");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle asinh$MH() {
        return RuntimeHelper.requireNonNull(constants$45.asinh$MH, "asinh");
    }

    public static double asinh(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.asinh$MH, "asinh");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __asinh$MH() {
        return RuntimeHelper.requireNonNull(constants$46.__asinh$MH, "__asinh");
    }

    public static double __asinh(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.__asinh$MH, "__asinh");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atanh$MH() {
        return RuntimeHelper.requireNonNull(constants$46.atanh$MH, "atanh");
    }

    public static double atanh(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.atanh$MH, "atanh");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __atanh$MH() {
        return RuntimeHelper.requireNonNull(constants$46.__atanh$MH, "__atanh");
    }

    public static double __atanh(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.__atanh$MH, "__atanh");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle exp$MH() {
        return RuntimeHelper.requireNonNull(constants$46.exp$MH, "exp");
    }

    public static double exp(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.exp$MH, "exp");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __exp$MH() {
        return RuntimeHelper.requireNonNull(constants$46.__exp$MH, "__exp");
    }

    public static double __exp(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.__exp$MH, "__exp");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle frexp$MH() {
        return RuntimeHelper.requireNonNull(constants$46.frexp$MH, "frexp");
    }

    public static double frexp(double __x, Addressable __exponent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.frexp$MH, "frexp");
        try {
            return (double) mh$.invokeExact(__x, __exponent.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __frexp$MH() {
        return RuntimeHelper.requireNonNull(constants$47.__frexp$MH, "__frexp");
    }

    public static double __frexp(double __x, Addressable __exponent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.__frexp$MH, "__frexp");
        try {
            return (double) mh$.invokeExact(__x, __exponent.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ldexp$MH() {
        return RuntimeHelper.requireNonNull(constants$47.ldexp$MH, "ldexp");
    }

    public static double ldexp(double __x, int __exponent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.ldexp$MH, "ldexp");
        try {
            return (double) mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __ldexp$MH() {
        return RuntimeHelper.requireNonNull(constants$47.__ldexp$MH, "__ldexp");
    }

    public static double __ldexp(double __x, int __exponent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.__ldexp$MH, "__ldexp");
        try {
            return (double) mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log$MH() {
        return RuntimeHelper.requireNonNull(constants$47.log$MH, "log");
    }

    public static double log(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.log$MH, "log");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __log$MH() {
        return RuntimeHelper.requireNonNull(constants$47.__log$MH, "__log");
    }

    public static double __log(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.__log$MH, "__log");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log10$MH() {
        return RuntimeHelper.requireNonNull(constants$47.log10$MH, "log10");
    }

    public static double log10(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.log10$MH, "log10");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __log10$MH() {
        return RuntimeHelper.requireNonNull(constants$48.__log10$MH, "__log10");
    }

    public static double __log10(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.__log10$MH, "__log10");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle modf$MH() {
        return RuntimeHelper.requireNonNull(constants$48.modf$MH, "modf");
    }

    public static double modf(double __x, Addressable __iptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.modf$MH, "modf");
        try {
            return (double) mh$.invokeExact(__x, __iptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __modf$MH() {
        return RuntimeHelper.requireNonNull(constants$48.__modf$MH, "__modf");
    }

    public static double __modf(double __x, Addressable __iptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.__modf$MH, "__modf");
        try {
            return (double) mh$.invokeExact(__x, __iptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle expm1$MH() {
        return RuntimeHelper.requireNonNull(constants$48.expm1$MH, "expm1");
    }

    public static double expm1(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.expm1$MH, "expm1");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __expm1$MH() {
        return RuntimeHelper.requireNonNull(constants$48.__expm1$MH, "__expm1");
    }

    public static double __expm1(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.__expm1$MH, "__expm1");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log1p$MH() {
        return RuntimeHelper.requireNonNull(constants$48.log1p$MH, "log1p");
    }

    public static double log1p(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.log1p$MH, "log1p");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __log1p$MH() {
        return RuntimeHelper.requireNonNull(constants$49.__log1p$MH, "__log1p");
    }

    public static double __log1p(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.__log1p$MH, "__log1p");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle logb$MH() {
        return RuntimeHelper.requireNonNull(constants$49.logb$MH, "logb");
    }

    public static double logb(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.logb$MH, "logb");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __logb$MH() {
        return RuntimeHelper.requireNonNull(constants$49.__logb$MH, "__logb");
    }

    public static double __logb(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.__logb$MH, "__logb");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle exp2$MH() {
        return RuntimeHelper.requireNonNull(constants$49.exp2$MH, "exp2");
    }

    public static double exp2(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.exp2$MH, "exp2");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __exp2$MH() {
        return RuntimeHelper.requireNonNull(constants$49.__exp2$MH, "__exp2");
    }

    public static double __exp2(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.__exp2$MH, "__exp2");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log2$MH() {
        return RuntimeHelper.requireNonNull(constants$49.log2$MH, "log2");
    }

    public static double log2(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.log2$MH, "log2");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __log2$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__log2$MH, "__log2");
    }

    public static double __log2(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.__log2$MH, "__log2");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle pow$MH() {
        return RuntimeHelper.requireNonNull(constants$50.pow$MH, "pow");
    }

    public static double pow(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.pow$MH, "pow");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __pow$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__pow$MH, "__pow");
    }

    public static double __pow(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.__pow$MH, "__pow");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$50.sqrt$MH, "sqrt");
    }

    public static double sqrt(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.sqrt$MH, "sqrt");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__sqrt$MH, "__sqrt");
    }

    public static double __sqrt(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.__sqrt$MH, "__sqrt");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$50.hypot$MH, "hypot");
    }

    public static double hypot(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.hypot$MH, "hypot");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$51.__hypot$MH, "__hypot");
    }

    public static double __hypot(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.__hypot$MH, "__hypot");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle cbrt$MH() {
        return RuntimeHelper.requireNonNull(constants$51.cbrt$MH, "cbrt");
    }

    public static double cbrt(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.cbrt$MH, "cbrt");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __cbrt$MH() {
        return RuntimeHelper.requireNonNull(constants$51.__cbrt$MH, "__cbrt");
    }

    public static double __cbrt(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.__cbrt$MH, "__cbrt");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$51.ceil$MH, "ceil");
    }

    public static double ceil(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.ceil$MH, "ceil");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$51.__ceil$MH, "__ceil");
    }

    public static double __ceil(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.__ceil$MH, "__ceil");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$51.fabs$MH, "fabs");
    }

    public static double fabs(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.fabs$MH, "fabs");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$52.__fabs$MH, "__fabs");
    }

    public static double __fabs(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.__fabs$MH, "__fabs");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle floor$MH() {
        return RuntimeHelper.requireNonNull(constants$52.floor$MH, "floor");
    }

    public static double floor(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.floor$MH, "floor");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __floor$MH() {
        return RuntimeHelper.requireNonNull(constants$52.__floor$MH, "__floor");
    }

    public static double __floor(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.__floor$MH, "__floor");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$52.fmod$MH, "fmod");
    }

    public static double fmod(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.fmod$MH, "fmod");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$52.__fmod$MH, "__fmod");
    }

    public static double __fmod(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.__fmod$MH, "__fmod");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle isinf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.isinf$MH, "isinf");
    }

    public static int isinf(double __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.isinf$MH, "isinf");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle finite$MH() {
        return RuntimeHelper.requireNonNull(constants$53.finite$MH, "finite");
    }

    public static int finite(double __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.finite$MH, "finite");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle drem$MH() {
        return RuntimeHelper.requireNonNull(constants$53.drem$MH, "drem");
    }

    public static double drem(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.drem$MH, "drem");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __drem$MH() {
        return RuntimeHelper.requireNonNull(constants$53.__drem$MH, "__drem");
    }

    public static double __drem(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.__drem$MH, "__drem");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle significand$MH() {
        return RuntimeHelper.requireNonNull(constants$53.significand$MH, "significand");
    }

    public static double significand(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.significand$MH, "significand");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __significand$MH() {
        return RuntimeHelper.requireNonNull(constants$53.__significand$MH, "__significand");
    }

    public static double __significand(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.__significand$MH, "__significand");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$53.copysign$MH, "copysign");
    }

    public static double copysign(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.copysign$MH, "copysign");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__copysign$MH, "__copysign");
    }

    public static double __copysign(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.__copysign$MH, "__copysign");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nan$MH() {
        return RuntimeHelper.requireNonNull(constants$54.nan$MH, "nan");
    }

    public static double nan(Addressable __tagb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.nan$MH, "nan");
        try {
            return (double) mh$.invokeExact(__tagb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __nan$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__nan$MH, "__nan");
    }

    public static double __nan(Addressable __tagb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.__nan$MH, "__nan");
        try {
            return (double) mh$.invokeExact(__tagb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle isnan$MH() {
        return RuntimeHelper.requireNonNull(constants$54.isnan$MH, "isnan");
    }

    public static int isnan(double __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.isnan$MH, "isnan");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle j0$MH() {
        return RuntimeHelper.requireNonNull(constants$54.j0$MH, "j0");
    }

    public static double j0(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.j0$MH, "j0");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __j0$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__j0$MH, "__j0");
    }

    public static double __j0(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.__j0$MH, "__j0");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle j1$MH() {
        return RuntimeHelper.requireNonNull(constants$55.j1$MH, "j1");
    }

    public static double j1(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.j1$MH, "j1");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __j1$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__j1$MH, "__j1");
    }

    public static double __j1(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.__j1$MH, "__j1");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle jn$MH() {
        return RuntimeHelper.requireNonNull(constants$55.jn$MH, "jn");
    }

    public static double jn(int x0, double x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.jn$MH, "jn");
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __jn$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__jn$MH, "__jn");
    }

    public static double __jn(int x0, double x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.__jn$MH, "__jn");
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle y0$MH() {
        return RuntimeHelper.requireNonNull(constants$55.y0$MH, "y0");
    }

    public static double y0(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.y0$MH, "y0");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __y0$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__y0$MH, "__y0");
    }

    public static double __y0(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.__y0$MH, "__y0");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle y1$MH() {
        return RuntimeHelper.requireNonNull(constants$56.y1$MH, "y1");
    }

    public static double y1(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.y1$MH, "y1");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __y1$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__y1$MH, "__y1");
    }

    public static double __y1(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.__y1$MH, "__y1");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle yn$MH() {
        return RuntimeHelper.requireNonNull(constants$56.yn$MH, "yn");
    }

    public static double yn(int x0, double x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.yn$MH, "yn");
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __yn$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__yn$MH, "__yn");
    }

    public static double __yn(int x0, double x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.__yn$MH, "__yn");
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle erf$MH() {
        return RuntimeHelper.requireNonNull(constants$56.erf$MH, "erf");
    }

    public static double erf(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.erf$MH, "erf");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __erf$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__erf$MH, "__erf");
    }

    public static double __erf(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.__erf$MH, "__erf");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle erfc$MH() {
        return RuntimeHelper.requireNonNull(constants$57.erfc$MH, "erfc");
    }

    public static double erfc(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.erfc$MH, "erfc");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __erfc$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__erfc$MH, "__erfc");
    }

    public static double __erfc(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.__erfc$MH, "__erfc");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$57.lgamma$MH, "lgamma");
    }

    public static double lgamma(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.lgamma$MH, "lgamma");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __lgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__lgamma$MH, "__lgamma");
    }

    public static double __lgamma(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.__lgamma$MH, "__lgamma");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$57.tgamma$MH, "tgamma");
    }

    public static double tgamma(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.tgamma$MH, "tgamma");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __tgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__tgamma$MH, "__tgamma");
    }

    public static double __tgamma(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.__tgamma$MH, "__tgamma");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$58.gamma$MH, "gamma");
    }

    public static double gamma(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.gamma$MH, "gamma");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$58.__gamma$MH, "__gamma");
    }

    public static double __gamma(double x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.__gamma$MH, "__gamma");
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lgamma_r$MH() {
        return RuntimeHelper.requireNonNull(constants$58.lgamma_r$MH, "lgamma_r");
    }

    public static double lgamma_r(double x0, Addressable __signgamp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.lgamma_r$MH, "lgamma_r");
        try {
            return (double) mh$.invokeExact(x0, __signgamp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __lgamma_r$MH() {
        return RuntimeHelper.requireNonNull(constants$58.__lgamma_r$MH, "__lgamma_r");
    }

    public static double __lgamma_r(double x0, Addressable __signgamp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.__lgamma_r$MH, "__lgamma_r");
        try {
            return (double) mh$.invokeExact(x0, __signgamp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rint$MH() {
        return RuntimeHelper.requireNonNull(constants$58.rint$MH, "rint");
    }

    public static double rint(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.rint$MH, "rint");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __rint$MH() {
        return RuntimeHelper.requireNonNull(constants$58.__rint$MH, "__rint");
    }

    public static double __rint(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.__rint$MH, "__rint");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$59.nextafter$MH, "nextafter");
    }

    public static double nextafter(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.nextafter$MH, "nextafter");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$59.__nextafter$MH, "__nextafter");
    }

    public static double __nextafter(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.__nextafter$MH, "__nextafter");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle remainder$MH() {
        return RuntimeHelper.requireNonNull(constants$59.remainder$MH, "remainder");
    }

    public static double remainder(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.remainder$MH, "remainder");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __remainder$MH() {
        return RuntimeHelper.requireNonNull(constants$59.__remainder$MH, "__remainder");
    }

    public static double __remainder(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.__remainder$MH, "__remainder");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$59.scalbn$MH, "scalbn");
    }

    public static double scalbn(double __x, int __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.scalbn$MH, "scalbn");
        try {
            return (double) mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$59.__scalbn$MH, "__scalbn");
    }

    public static double __scalbn(double __x, int __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.__scalbn$MH, "__scalbn");
        try {
            return (double) mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ilogb$MH() {
        return RuntimeHelper.requireNonNull(constants$60.ilogb$MH, "ilogb");
    }

    public static int ilogb(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.ilogb$MH, "ilogb");
        try {
            return (int) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __ilogb$MH() {
        return RuntimeHelper.requireNonNull(constants$60.__ilogb$MH, "__ilogb");
    }

    public static int __ilogb(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.__ilogb$MH, "__ilogb");
        try {
            return (int) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scalbln$MH() {
        return RuntimeHelper.requireNonNull(constants$60.scalbln$MH, "scalbln");
    }

    public static double scalbln(double __x, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.scalbln$MH, "scalbln");
        try {
            return (double) mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __scalbln$MH() {
        return RuntimeHelper.requireNonNull(constants$60.__scalbln$MH, "__scalbln");
    }

    public static double __scalbln(double __x, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.__scalbln$MH, "__scalbln");
        try {
            return (double) mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nearbyint$MH() {
        return RuntimeHelper.requireNonNull(constants$60.nearbyint$MH, "nearbyint");
    }

    public static double nearbyint(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.nearbyint$MH, "nearbyint");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __nearbyint$MH() {
        return RuntimeHelper.requireNonNull(constants$60.__nearbyint$MH, "__nearbyint");
    }

    public static double __nearbyint(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.__nearbyint$MH, "__nearbyint");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle round$MH() {
        return RuntimeHelper.requireNonNull(constants$61.round$MH, "round");
    }

    public static double round(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.round$MH, "round");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __round$MH() {
        return RuntimeHelper.requireNonNull(constants$61.__round$MH, "__round");
    }

    public static double __round(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.__round$MH, "__round");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$61.trunc$MH, "trunc");
    }

    public static double trunc(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.trunc$MH, "trunc");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$61.__trunc$MH, "__trunc");
    }

    public static double __trunc(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.__trunc$MH, "__trunc");
        try {
            return (double) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle remquo$MH() {
        return RuntimeHelper.requireNonNull(constants$61.remquo$MH, "remquo");
    }

    public static double remquo(double __x, double __y, Addressable __quo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.remquo$MH, "remquo");
        try {
            return (double) mh$.invokeExact(__x, __y, __quo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __remquo$MH() {
        return RuntimeHelper.requireNonNull(constants$61.__remquo$MH, "__remquo");
    }

    public static double __remquo(double __x, double __y, Addressable __quo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.__remquo$MH, "__remquo");
        try {
            return (double) mh$.invokeExact(__x, __y, __quo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$62.lrint$MH, "lrint");
    }

    public static long lrint(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.lrint$MH, "lrint");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$62.__lrint$MH, "__lrint");
    }

    public static long __lrint(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.__lrint$MH, "__lrint");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$62.llrint$MH, "llrint");
    }

    public static long llrint(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.llrint$MH, "llrint");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$62.__llrint$MH, "__llrint");
    }

    public static long __llrint(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.__llrint$MH, "__llrint");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lround$MH() {
        return RuntimeHelper.requireNonNull(constants$62.lround$MH, "lround");
    }

    public static long lround(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.lround$MH, "lround");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __lround$MH() {
        return RuntimeHelper.requireNonNull(constants$62.__lround$MH, "__lround");
    }

    public static long __lround(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.__lround$MH, "__lround");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle llround$MH() {
        return RuntimeHelper.requireNonNull(constants$63.llround$MH, "llround");
    }

    public static long llround(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.llround$MH, "llround");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __llround$MH() {
        return RuntimeHelper.requireNonNull(constants$63.__llround$MH, "__llround");
    }

    public static long __llround(double __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.__llround$MH, "__llround");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$63.fdim$MH, "fdim");
    }

    public static double fdim(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.fdim$MH, "fdim");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$63.__fdim$MH, "__fdim");
    }

    public static double __fdim(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.__fdim$MH, "__fdim");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$63.fmax$MH, "fmax");
    }

    public static double fmax(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.fmax$MH, "fmax");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$63.__fmax$MH, "__fmax");
    }

    public static double __fmax(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.__fmax$MH, "__fmax");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$64.fmin$MH, "fmin");
    }

    public static double fmin(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.fmin$MH, "fmin");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$64.__fmin$MH, "__fmin");
    }

    public static double __fmin(double __x, double __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.__fmin$MH, "__fmin");
        try {
            return (double) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fma$MH() {
        return RuntimeHelper.requireNonNull(constants$64.fma$MH, "fma");
    }

    public static double fma(double __x, double __y, double __z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.fma$MH, "fma");
        try {
            return (double) mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fma$MH() {
        return RuntimeHelper.requireNonNull(constants$64.__fma$MH, "__fma");
    }

    public static double __fma(double __x, double __y, double __z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.__fma$MH, "__fma");
        try {
            return (double) mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$64.scalb$MH, "scalb");
    }

    public static double scalb(double __x, double __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.scalb$MH, "scalb");
        try {
            return (double) mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$64.__scalb$MH, "__scalb");
    }

    public static double __scalb(double __x, double __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.__scalb$MH, "__scalb");
        try {
            return (double) mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fpclassifyf$MH() {
        return RuntimeHelper.requireNonNull(constants$65.__fpclassifyf$MH, "__fpclassifyf");
    }

    public static int __fpclassifyf(float __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.__fpclassifyf$MH, "__fpclassifyf");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __signbitf$MH() {
        return RuntimeHelper.requireNonNull(constants$65.__signbitf$MH, "__signbitf");
    }

    public static int __signbitf(float __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.__signbitf$MH, "__signbitf");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __isinff$MH() {
        return RuntimeHelper.requireNonNull(constants$65.__isinff$MH, "__isinff");
    }

    public static int __isinff(float __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.__isinff$MH, "__isinff");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$65.__finitef$MH, "__finitef");
    }

    public static int __finitef(float __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.__finitef$MH, "__finitef");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$65.__isnanf$MH, "__isnanf");
    }

    public static int __isnanf(float __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.__isnanf$MH, "__isnanf");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __iseqsigf$MH() {
        return RuntimeHelper.requireNonNull(constants$65.__iseqsigf$MH, "__iseqsigf");
    }

    public static int __iseqsigf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.__iseqsigf$MH, "__iseqsigf");
        try {
            return (int) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __issignalingf$MH() {
        return RuntimeHelper.requireNonNull(constants$66.__issignalingf$MH, "__issignalingf");
    }

    public static int __issignalingf(float __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.__issignalingf$MH, "__issignalingf");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$66.acosf$MH, "acosf");
    }

    public static float acosf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.acosf$MH, "acosf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$66.__acosf$MH, "__acosf");
    }

    public static float __acosf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.__acosf$MH, "__acosf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$66.asinf$MH, "asinf");
    }

    public static float asinf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.asinf$MH, "asinf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$66.__asinf$MH, "__asinf");
    }

    public static float __asinf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.__asinf$MH, "__asinf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$66.atanf$MH, "atanf");
    }

    public static float atanf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.atanf$MH, "atanf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$67.__atanf$MH, "__atanf");
    }

    public static float __atanf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.__atanf$MH, "__atanf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$67.atan2f$MH, "atan2f");
    }

    public static float atan2f(float __y, float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.atan2f$MH, "atan2f");
        try {
            return (float) mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$67.__atan2f$MH, "__atan2f");
    }

    public static float __atan2f(float __y, float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.__atan2f$MH, "__atan2f");
        try {
            return (float) mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$67.cosf$MH, "cosf");
    }

    public static float cosf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.cosf$MH, "cosf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$67.__cosf$MH, "__cosf");
    }

    public static float __cosf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.__cosf$MH, "__cosf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sinf$MH, "sinf");
    }

    public static float sinf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.sinf$MH, "sinf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$68.__sinf$MH, "__sinf");
    }

    public static float __sinf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.__sinf$MH, "__sinf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$68.tanf$MH, "tanf");
    }

    public static float tanf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.tanf$MH, "tanf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$68.__tanf$MH, "__tanf");
    }

    public static float __tanf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.__tanf$MH, "__tanf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$68.coshf$MH, "coshf");
    }

    public static float coshf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.coshf$MH, "coshf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$68.__coshf$MH, "__coshf");
    }

    public static float __coshf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.__coshf$MH, "__coshf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sinhf$MH, "sinhf");
    }

    public static float sinhf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.sinhf$MH, "sinhf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$69.__sinhf$MH, "__sinhf");
    }

    public static float __sinhf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.__sinhf$MH, "__sinhf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$69.tanhf$MH, "tanhf");
    }

    public static float tanhf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.tanhf$MH, "tanhf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$69.__tanhf$MH, "__tanhf");
    }

    public static float __tanhf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.__tanhf$MH, "__tanhf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$69.acoshf$MH, "acoshf");
    }

    public static float acoshf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.acoshf$MH, "acoshf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$69.__acoshf$MH, "__acoshf");
    }

    public static float __acoshf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.__acoshf$MH, "__acoshf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$69.asinhf$MH, "asinhf");
    }

    public static float asinhf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.asinhf$MH, "asinhf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$70.__asinhf$MH, "__asinhf");
    }

    public static float __asinhf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.__asinhf$MH, "__asinhf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$70.atanhf$MH, "atanhf");
    }

    public static float atanhf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.atanhf$MH, "atanhf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$70.__atanhf$MH, "__atanhf");
    }

    public static float __atanhf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.__atanhf$MH, "__atanhf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle expf$MH() {
        return RuntimeHelper.requireNonNull(constants$70.expf$MH, "expf");
    }

    public static float expf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.expf$MH, "expf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __expf$MH() {
        return RuntimeHelper.requireNonNull(constants$70.__expf$MH, "__expf");
    }

    public static float __expf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.__expf$MH, "__expf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$70.frexpf$MH, "frexpf");
    }

    public static float frexpf(float __x, Addressable __exponent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.frexpf$MH, "frexpf");
        try {
            return (float) mh$.invokeExact(__x, __exponent.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.__frexpf$MH, "__frexpf");
    }

    public static float __frexpf(float __x, Addressable __exponent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.__frexpf$MH, "__frexpf");
        try {
            return (float) mh$.invokeExact(__x, __exponent.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.ldexpf$MH, "ldexpf");
    }

    public static float ldexpf(float __x, int __exponent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.ldexpf$MH, "ldexpf");
        try {
            return (float) mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.__ldexpf$MH, "__ldexpf");
    }

    public static float __ldexpf(float __x, int __exponent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.__ldexpf$MH, "__ldexpf");
        try {
            return (float) mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle logf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.logf$MH, "logf");
    }

    public static float logf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.logf$MH, "logf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __logf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.__logf$MH, "__logf");
    }

    public static float __logf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.__logf$MH, "__logf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$71.log10f$MH, "log10f");
    }

    public static float log10f(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.log10f$MH, "log10f");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$72.__log10f$MH, "__log10f");
    }

    public static float __log10f(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.__log10f$MH, "__log10f");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle modff$MH() {
        return RuntimeHelper.requireNonNull(constants$72.modff$MH, "modff");
    }

    public static float modff(float __x, Addressable __iptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.modff$MH, "modff");
        try {
            return (float) mh$.invokeExact(__x, __iptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __modff$MH() {
        return RuntimeHelper.requireNonNull(constants$72.__modff$MH, "__modff");
    }

    public static float __modff(float __x, Addressable __iptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.__modff$MH, "__modff");
        try {
            return (float) mh$.invokeExact(__x, __iptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$72.expm1f$MH, "expm1f");
    }

    public static float expm1f(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.expm1f$MH, "expm1f");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$72.__expm1f$MH, "__expm1f");
    }

    public static float __expm1f(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.__expm1f$MH, "__expm1f");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$72.log1pf$MH, "log1pf");
    }

    public static float log1pf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.log1pf$MH, "log1pf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$73.__log1pf$MH, "__log1pf");
    }

    public static float __log1pf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.__log1pf$MH, "__log1pf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$73.logbf$MH, "logbf");
    }

    public static float logbf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.logbf$MH, "logbf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$73.__logbf$MH, "__logbf");
    }

    public static float __logbf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.__logbf$MH, "__logbf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$73.exp2f$MH, "exp2f");
    }

    public static float exp2f(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.exp2f$MH, "exp2f");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$73.__exp2f$MH, "__exp2f");
    }

    public static float __exp2f(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.__exp2f$MH, "__exp2f");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$73.log2f$MH, "log2f");
    }

    public static float log2f(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.log2f$MH, "log2f");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$74.__log2f$MH, "__log2f");
    }

    public static float __log2f(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.__log2f$MH, "__log2f");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle powf$MH() {
        return RuntimeHelper.requireNonNull(constants$74.powf$MH, "powf");
    }

    public static float powf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.powf$MH, "powf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __powf$MH() {
        return RuntimeHelper.requireNonNull(constants$74.__powf$MH, "__powf");
    }

    public static float __powf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.__powf$MH, "__powf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$74.sqrtf$MH, "sqrtf");
    }

    public static float sqrtf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.sqrtf$MH, "sqrtf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$74.__sqrtf$MH, "__sqrtf");
    }

    public static float __sqrtf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.__sqrtf$MH, "__sqrtf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$74.hypotf$MH, "hypotf");
    }

    public static float hypotf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.hypotf$MH, "hypotf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$75.__hypotf$MH, "__hypotf");
    }

    public static float __hypotf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.__hypotf$MH, "__hypotf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$75.cbrtf$MH, "cbrtf");
    }

    public static float cbrtf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.cbrtf$MH, "cbrtf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$75.__cbrtf$MH, "__cbrtf");
    }

    public static float __cbrtf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.__cbrtf$MH, "__cbrtf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$75.ceilf$MH, "ceilf");
    }

    public static float ceilf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.ceilf$MH, "ceilf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$75.__ceilf$MH, "__ceilf");
    }

    public static float __ceilf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.__ceilf$MH, "__ceilf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$75.fabsf$MH, "fabsf");
    }

    public static float fabsf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.fabsf$MH, "fabsf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$76.__fabsf$MH, "__fabsf");
    }

    public static float __fabsf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.__fabsf$MH, "__fabsf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$76.floorf$MH, "floorf");
    }

    public static float floorf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.floorf$MH, "floorf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$76.__floorf$MH, "__floorf");
    }

    public static float __floorf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.__floorf$MH, "__floorf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$76.fmodf$MH, "fmodf");
    }

    public static float fmodf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.fmodf$MH, "fmodf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$76.__fmodf$MH, "__fmodf");
    }

    public static float __fmodf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.__fmodf$MH, "__fmodf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle isinff$MH() {
        return RuntimeHelper.requireNonNull(constants$76.isinff$MH, "isinff");
    }

    public static int isinff(float __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.isinff$MH, "isinff");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$77.finitef$MH, "finitef");
    }

    public static int finitef(float __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.finitef$MH, "finitef");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle dremf$MH() {
        return RuntimeHelper.requireNonNull(constants$77.dremf$MH, "dremf");
    }

    public static float dremf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.dremf$MH, "dremf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __dremf$MH() {
        return RuntimeHelper.requireNonNull(constants$77.__dremf$MH, "__dremf");
    }

    public static float __dremf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.__dremf$MH, "__dremf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle significandf$MH() {
        return RuntimeHelper.requireNonNull(constants$77.significandf$MH, "significandf");
    }

    public static float significandf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.significandf$MH, "significandf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __significandf$MH() {
        return RuntimeHelper.requireNonNull(constants$77.__significandf$MH, "__significandf");
    }

    public static float __significandf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.__significandf$MH, "__significandf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$77.copysignf$MH, "copysignf");
    }

    public static float copysignf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.copysignf$MH, "copysignf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$78.__copysignf$MH, "__copysignf");
    }

    public static float __copysignf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.__copysignf$MH, "__copysignf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$78.nanf$MH, "nanf");
    }

    public static float nanf(Addressable __tagb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.nanf$MH, "nanf");
        try {
            return (float) mh$.invokeExact(__tagb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$78.__nanf$MH, "__nanf");
    }

    public static float __nanf(Addressable __tagb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.__nanf$MH, "__nanf");
        try {
            return (float) mh$.invokeExact(__tagb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$78.isnanf$MH, "isnanf");
    }

    public static int isnanf(float __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.isnanf$MH, "isnanf");
        try {
            return (int) mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle j0f$MH() {
        return RuntimeHelper.requireNonNull(constants$78.j0f$MH, "j0f");
    }

    public static float j0f(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.j0f$MH, "j0f");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __j0f$MH() {
        return RuntimeHelper.requireNonNull(constants$78.__j0f$MH, "__j0f");
    }

    public static float __j0f(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.__j0f$MH, "__j0f");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle j1f$MH() {
        return RuntimeHelper.requireNonNull(constants$79.j1f$MH, "j1f");
    }

    public static float j1f(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.j1f$MH, "j1f");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __j1f$MH() {
        return RuntimeHelper.requireNonNull(constants$79.__j1f$MH, "__j1f");
    }

    public static float __j1f(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.__j1f$MH, "__j1f");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle jnf$MH() {
        return RuntimeHelper.requireNonNull(constants$79.jnf$MH, "jnf");
    }

    public static float jnf(int x0, float x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.jnf$MH, "jnf");
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __jnf$MH() {
        return RuntimeHelper.requireNonNull(constants$79.__jnf$MH, "__jnf");
    }

    public static float __jnf(int x0, float x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.__jnf$MH, "__jnf");
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle y0f$MH() {
        return RuntimeHelper.requireNonNull(constants$79.y0f$MH, "y0f");
    }

    public static float y0f(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.y0f$MH, "y0f");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __y0f$MH() {
        return RuntimeHelper.requireNonNull(constants$79.__y0f$MH, "__y0f");
    }

    public static float __y0f(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.__y0f$MH, "__y0f");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle y1f$MH() {
        return RuntimeHelper.requireNonNull(constants$80.y1f$MH, "y1f");
    }

    public static float y1f(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.y1f$MH, "y1f");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __y1f$MH() {
        return RuntimeHelper.requireNonNull(constants$80.__y1f$MH, "__y1f");
    }

    public static float __y1f(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.__y1f$MH, "__y1f");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ynf$MH() {
        return RuntimeHelper.requireNonNull(constants$80.ynf$MH, "ynf");
    }

    public static float ynf(int x0, float x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.ynf$MH, "ynf");
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __ynf$MH() {
        return RuntimeHelper.requireNonNull(constants$80.__ynf$MH, "__ynf");
    }

    public static float __ynf(int x0, float x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.__ynf$MH, "__ynf");
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle erff$MH() {
        return RuntimeHelper.requireNonNull(constants$80.erff$MH, "erff");
    }

    public static float erff(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.erff$MH, "erff");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __erff$MH() {
        return RuntimeHelper.requireNonNull(constants$80.__erff$MH, "__erff");
    }

    public static float __erff(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.__erff$MH, "__erff");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$81.erfcf$MH, "erfcf");
    }

    public static float erfcf(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.erfcf$MH, "erfcf");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$81.__erfcf$MH, "__erfcf");
    }

    public static float __erfcf(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.__erfcf$MH, "__erfcf");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$81.lgammaf$MH, "lgammaf");
    }

    public static float lgammaf(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.lgammaf$MH, "lgammaf");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$81.__lgammaf$MH, "__lgammaf");
    }

    public static float __lgammaf(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.__lgammaf$MH, "__lgammaf");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$81.tgammaf$MH, "tgammaf");
    }

    public static float tgammaf(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.tgammaf$MH, "tgammaf");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$81.__tgammaf$MH, "__tgammaf");
    }

    public static float __tgammaf(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.__tgammaf$MH, "__tgammaf");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle gammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$82.gammaf$MH, "gammaf");
    }

    public static float gammaf(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.gammaf$MH, "gammaf");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __gammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$82.__gammaf$MH, "__gammaf");
    }

    public static float __gammaf(float x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.__gammaf$MH, "__gammaf");
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lgammaf_r$MH() {
        return RuntimeHelper.requireNonNull(constants$82.lgammaf_r$MH, "lgammaf_r");
    }

    public static float lgammaf_r(float x0, Addressable __signgamp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.lgammaf_r$MH, "lgammaf_r");
        try {
            return (float) mh$.invokeExact(x0, __signgamp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __lgammaf_r$MH() {
        return RuntimeHelper.requireNonNull(constants$82.__lgammaf_r$MH, "__lgammaf_r");
    }

    public static float __lgammaf_r(float x0, Addressable __signgamp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.__lgammaf_r$MH, "__lgammaf_r");
        try {
            return (float) mh$.invokeExact(x0, __signgamp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$82.rintf$MH, "rintf");
    }

    public static float rintf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.rintf$MH, "rintf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$82.__rintf$MH, "__rintf");
    }

    public static float __rintf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.__rintf$MH, "__rintf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$83.nextafterf$MH, "nextafterf");
    }

    public static float nextafterf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.nextafterf$MH, "nextafterf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$83.__nextafterf$MH, "__nextafterf");
    }

    public static float __nextafterf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.__nextafterf$MH, "__nextafterf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$83.remainderf$MH, "remainderf");
    }

    public static float remainderf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.remainderf$MH, "remainderf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$83.__remainderf$MH, "__remainderf");
    }

    public static float __remainderf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.__remainderf$MH, "__remainderf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$83.scalbnf$MH, "scalbnf");
    }

    public static float scalbnf(float __x, int __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.scalbnf$MH, "scalbnf");
        try {
            return (float) mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$83.__scalbnf$MH, "__scalbnf");
    }

    public static float __scalbnf(float __x, int __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.__scalbnf$MH, "__scalbnf");
        try {
            return (float) mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$84.ilogbf$MH, "ilogbf");
    }

    public static int ilogbf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.ilogbf$MH, "ilogbf");
        try {
            return (int) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$84.__ilogbf$MH, "__ilogbf");
    }

    public static int __ilogbf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.__ilogbf$MH, "__ilogbf");
        try {
            return (int) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$84.scalblnf$MH, "scalblnf");
    }

    public static float scalblnf(float __x, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.scalblnf$MH, "scalblnf");
        try {
            return (float) mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$84.__scalblnf$MH, "__scalblnf");
    }

    public static float __scalblnf(float __x, long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.__scalblnf$MH, "__scalblnf");
        try {
            return (float) mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$84.nearbyintf$MH, "nearbyintf");
    }

    public static float nearbyintf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.nearbyintf$MH, "nearbyintf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$84.__nearbyintf$MH, "__nearbyintf");
    }

    public static float __nearbyintf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.__nearbyintf$MH, "__nearbyintf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$85.roundf$MH, "roundf");
    }

    public static float roundf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.roundf$MH, "roundf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$85.__roundf$MH, "__roundf");
    }

    public static float __roundf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.__roundf$MH, "__roundf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$85.truncf$MH, "truncf");
    }

    public static float truncf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.truncf$MH, "truncf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$85.__truncf$MH, "__truncf");
    }

    public static float __truncf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.__truncf$MH, "__truncf");
        try {
            return (float) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$85.remquof$MH, "remquof");
    }

    public static float remquof(float __x, float __y, Addressable __quo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.remquof$MH, "remquof");
        try {
            return (float) mh$.invokeExact(__x, __y, __quo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$85.__remquof$MH, "__remquof");
    }

    public static float __remquof(float __x, float __y, Addressable __quo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.__remquof$MH, "__remquof");
        try {
            return (float) mh$.invokeExact(__x, __y, __quo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$86.lrintf$MH, "lrintf");
    }

    public static long lrintf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.lrintf$MH, "lrintf");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$86.__lrintf$MH, "__lrintf");
    }

    public static long __lrintf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.__lrintf$MH, "__lrintf");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$86.llrintf$MH, "llrintf");
    }

    public static long llrintf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.llrintf$MH, "llrintf");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$86.__llrintf$MH, "__llrintf");
    }

    public static long __llrintf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.__llrintf$MH, "__llrintf");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$86.lroundf$MH, "lroundf");
    }

    public static long lroundf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.lroundf$MH, "lroundf");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$86.__lroundf$MH, "__lroundf");
    }

    public static long __lroundf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.__lroundf$MH, "__lroundf");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$87.llroundf$MH, "llroundf");
    }

    public static long llroundf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.llroundf$MH, "llroundf");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$87.__llroundf$MH, "__llroundf");
    }

    public static long __llroundf(float __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.__llroundf$MH, "__llroundf");
        try {
            return (long) mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$87.fdimf$MH, "fdimf");
    }

    public static float fdimf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.fdimf$MH, "fdimf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$87.__fdimf$MH, "__fdimf");
    }

    public static float __fdimf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.__fdimf$MH, "__fdimf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$87.fmaxf$MH, "fmaxf");
    }

    public static float fmaxf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.fmaxf$MH, "fmaxf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$87.__fmaxf$MH, "__fmaxf");
    }

    public static float __fmaxf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.__fmaxf$MH, "__fmaxf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$88.fminf$MH, "fminf");
    }

    public static float fminf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.fminf$MH, "fminf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$88.__fminf$MH, "__fminf");
    }

    public static float __fminf(float __x, float __y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.__fminf$MH, "__fminf");
        try {
            return (float) mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$88.fmaf$MH, "fmaf");
    }

    public static float fmaf(float __x, float __y, float __z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.fmaf$MH, "fmaf");
        try {
            return (float) mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$88.__fmaf$MH, "__fmaf");
    }

    public static float __fmaf(float __x, float __y, float __z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.__fmaf$MH, "__fmaf");
        try {
            return (float) mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scalbf$MH() {
        return RuntimeHelper.requireNonNull(constants$88.scalbf$MH, "scalbf");
    }

    public static float scalbf(float __x, float __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.scalbf$MH, "scalbf");
        try {
            return (float) mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __scalbf$MH() {
        return RuntimeHelper.requireNonNull(constants$88.__scalbf$MH, "__scalbf");
    }

    public static float __scalbf(float __x, float __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.__scalbf$MH, "__scalbf");
        try {
            return (float) mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MemoryLayout signgam$LAYOUT() {
        return constants$89.signgam$LAYOUT;
    }

    public static VarHandle signgam$VH() {
        return constants$89.signgam$VH;
    }

    public static MemorySegment signgam$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$89.signgam$SEGMENT, "signgam");
    }

    public static int signgam$get() {
        return (int) constants$89.signgam$VH.get(RuntimeHelper.requireNonNull(constants$89.signgam$SEGMENT, "signgam"));
    }

    public static void signgam$set(int x) {
        constants$89.signgam$VH.set(RuntimeHelper.requireNonNull(constants$89.signgam$SEGMENT, "signgam"), x);
    }

    public static MethodHandle __errno_location$MH() {
        return RuntimeHelper.requireNonNull(constants$89.__errno_location$MH, "__errno_location");
    }

    public static MemoryAddress __errno_location() {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.__errno_location$MH, "__errno_location");
        try {
            return (jdk.incubator.foreign.MemoryAddress) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle gettimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$89.gettimeofday$MH, "gettimeofday");
    }

    public static int gettimeofday(Addressable __tv, Addressable __tz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.gettimeofday$MH, "gettimeofday");
        try {
            return (int) mh$.invokeExact(__tv.address(), __tz.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle settimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$89.settimeofday$MH, "settimeofday");
    }

    public static int settimeofday(Addressable __tv, Addressable __tz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.settimeofday$MH, "settimeofday");
        try {
            return (int) mh$.invokeExact(__tv.address(), __tz.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle adjtime$MH() {
        return RuntimeHelper.requireNonNull(constants$89.adjtime$MH, "adjtime");
    }

    public static int adjtime(Addressable __delta, Addressable __olddelta) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.adjtime$MH, "adjtime");
        try {
            return (int) mh$.invokeExact(__delta.address(), __olddelta.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static int ITIMER_REAL() {
        return (int) 0L;
    }

    public static int ITIMER_VIRTUAL() {
        return (int) 1L;
    }

    public static int ITIMER_PROF() {
        return (int) 2L;
    }

    public static MethodHandle getitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$89.getitimer$MH, "getitimer");
    }

    public static int getitimer(int __which, Addressable __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.getitimer$MH, "getitimer");
        try {
            return (int) mh$.invokeExact(__which, __value.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$90.setitimer$MH, "setitimer");
    }

    public static int setitimer(int __which, Addressable __new, Addressable __old) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.setitimer$MH, "setitimer");
        try {
            return (int) mh$.invokeExact(__which, __new.address(), __old.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle utimes$MH() {
        return RuntimeHelper.requireNonNull(constants$90.utimes$MH, "utimes");
    }

    public static int utimes(Addressable __file, Addressable __tvp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.utimes$MH, "utimes");
        try {
            return (int) mh$.invokeExact(__file.address(), __tvp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lutimes$MH() {
        return RuntimeHelper.requireNonNull(constants$90.lutimes$MH, "lutimes");
    }

    public static int lutimes(Addressable __file, Addressable __tvp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.lutimes$MH, "lutimes");
        try {
            return (int) mh$.invokeExact(__file.address(), __tvp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle futimes$MH() {
        return RuntimeHelper.requireNonNull(constants$90.futimes$MH, "futimes");
    }

    public static int futimes(int __fd, Addressable __tvp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.futimes$MH, "futimes");
        try {
            return (int) mh$.invokeExact(__fd, __tvp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$90.imaxabs$MH, "imaxabs");
    }

    public static long imaxabs(long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.imaxabs$MH, "imaxabs");
        try {
            return (long) mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$90.imaxdiv$MH, "imaxdiv");
    }

    public static MemorySegment imaxdiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.imaxdiv$MH, "imaxdiv");
        try {
            return (jdk.incubator.foreign.MemorySegment) mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MemorySegment imaxdiv(ResourceScope scope, long __numer, long __denom) {
        return imaxdiv(SegmentAllocator.ofScope(scope), __numer, __denom);
    }

    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$91.strtoimax$MH, "strtoimax");
    }

    public static long strtoimax(Addressable __nptr, Addressable __endptr, int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.strtoimax$MH, "strtoimax");
        try {
            return (long) mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$91.strtoumax$MH, "strtoumax");
    }

    public static long strtoumax(Addressable __nptr, Addressable __endptr, int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.strtoumax$MH, "strtoumax");
        try {
            return (long) mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$91.wcstoimax$MH, "wcstoimax");
    }

    public static long wcstoimax(Addressable __nptr, Addressable __endptr, int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.wcstoimax$MH, "wcstoimax");
        try {
            return (long) mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$91.wcstoumax$MH, "wcstoumax");
    }

    public static long wcstoumax(Addressable __nptr, Addressable __endptr, int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.wcstoumax$MH, "wcstoumax");
        try {
            return (long) mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static int LIBRAW_OPEN_BIGFILE() {
        return (int) 1L;
    }

    public static int LIBRAW_OPEN_FILE() {
        return (int) 2L;
    }

    public static int LIBRAW_OPENBAYER_RGGB() {
        return (int) 148L;
    }

    public static int LIBRAW_OPENBAYER_BGGR() {
        return (int) 22L;
    }

    public static int LIBRAW_OPENBAYER_GRBG() {
        return (int) 97L;
    }

    public static int LIBRAW_OPENBAYER_GBRG() {
        return (int) 73L;
    }

    public static int LIBRAW_DNGFM_FORWARDMATRIX() {
        return (int) 1L;
    }

    public static int LIBRAW_DNGFM_ILLUMINANT() {
        return (int) 2L;
    }
}


