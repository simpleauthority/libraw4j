// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.FunctionDescriptor;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_FLOAT;
import static jdk.incubator.foreign.CLinker.C_INT;

class constants$66 {

    static final FunctionDescriptor __issignalingf$FUNC = FunctionDescriptor.of(C_INT,
            C_FLOAT
    );
    static final MethodHandle __issignalingf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__issignalingf",
            "(F)I",
            constants$66.__issignalingf$FUNC, false
    );
    static final FunctionDescriptor acosf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle acosf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "acosf",
            "(F)F",
            constants$66.acosf$FUNC, false
    );
    static final FunctionDescriptor __acosf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __acosf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__acosf",
            "(F)F",
            constants$66.__acosf$FUNC, false
    );
    static final FunctionDescriptor asinf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle asinf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "asinf",
            "(F)F",
            constants$66.asinf$FUNC, false
    );
    static final FunctionDescriptor __asinf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __asinf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__asinf",
            "(F)F",
            constants$66.__asinf$FUNC, false
    );
    static final FunctionDescriptor atanf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle atanf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "atanf",
            "(F)F",
            constants$66.atanf$FUNC, false
    );
}


