// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.FunctionDescriptor;
import jdk.incubator.foreign.MemoryHandles;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;

import static jdk.incubator.foreign.CLinker.C_LONG;
import static jdk.incubator.foreign.CLinker.C_POINTER;

class constants$8 {

    static final FunctionDescriptor stpcpy$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER
    );
    static final MethodHandle stpcpy$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "stpcpy",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            constants$8.stpcpy$FUNC, false
    );
    static final FunctionDescriptor __stpncpy$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
    );
    static final MethodHandle __stpncpy$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__stpncpy",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
            constants$8.__stpncpy$FUNC, false
    );
    static final FunctionDescriptor stpncpy$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
    );
    static final MethodHandle stpncpy$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "stpncpy",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
            constants$8.stpncpy$FUNC, false
    );
    static final MemoryLayout stdin$LAYOUT = C_POINTER;
    static final VarHandle stdin$VH = MemoryHandles.asAddressVarHandle(constants$8.stdin$LAYOUT.varHandle(long.class));
    static final MemorySegment stdin$SEGMENT = RuntimeHelper.lookupGlobalVariable(libraw_h.LIBRARIES, "stdin", constants$8.stdin$LAYOUT);
    static final MemoryLayout stdout$LAYOUT = C_POINTER;
    static final VarHandle stdout$VH = MemoryHandles.asAddressVarHandle(constants$8.stdout$LAYOUT.varHandle(long.class));
    static final MemorySegment stdout$SEGMENT = RuntimeHelper.lookupGlobalVariable(libraw_h.LIBRARIES, "stdout", constants$8.stdout$LAYOUT);
    static final MemoryLayout stderr$LAYOUT = C_POINTER;
    static final VarHandle stderr$VH = MemoryHandles.asAddressVarHandle(constants$8.stderr$LAYOUT.varHandle(long.class));
    static final MemorySegment stderr$SEGMENT = RuntimeHelper.lookupGlobalVariable(libraw_h.LIBRARIES, "stderr", constants$8.stderr$LAYOUT);
}


