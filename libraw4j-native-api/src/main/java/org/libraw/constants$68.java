// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.FunctionDescriptor;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_FLOAT;

class constants$68 {

    static final FunctionDescriptor __sinf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __sinf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__sinf",
            "(F)F",
            constants$68.__sinf$FUNC, false
    );
    static final FunctionDescriptor tanf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle tanf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "tanf",
            "(F)F",
            constants$68.tanf$FUNC, false
    );
    static final FunctionDescriptor __tanf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __tanf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__tanf",
            "(F)F",
            constants$68.__tanf$FUNC, false
    );
    static final FunctionDescriptor coshf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle coshf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "coshf",
            "(F)F",
            constants$68.coshf$FUNC, false
    );
    static final FunctionDescriptor __coshf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __coshf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__coshf",
            "(F)F",
            constants$68.__coshf$FUNC, false
    );
    static final FunctionDescriptor sinhf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle sinhf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "sinhf",
            "(F)F",
            constants$68.sinhf$FUNC, false
    );
}


