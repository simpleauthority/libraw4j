// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.FunctionDescriptor;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_LONG;
import static jdk.incubator.foreign.CLinker.C_POINTER;

class constants$32 {

    static final FunctionDescriptor realloc$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_LONG
    );
    static final MethodHandle realloc$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "realloc",
            "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
            constants$32.realloc$FUNC, false
    );
    static final FunctionDescriptor reallocarray$FUNC = FunctionDescriptor.of(C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG
    );
    static final MethodHandle reallocarray$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "reallocarray",
            "(Ljdk/incubator/foreign/MemoryAddress;JJ)Ljdk/incubator/foreign/MemoryAddress;",
            constants$32.reallocarray$FUNC, false
    );
    static final FunctionDescriptor free$FUNC = FunctionDescriptor.ofVoid(
            C_POINTER
    );
    static final MethodHandle free$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "free",
            "(Ljdk/incubator/foreign/MemoryAddress;)V",
            constants$32.free$FUNC, false
    );
    static final FunctionDescriptor alloca$FUNC = FunctionDescriptor.of(C_POINTER,
            C_LONG
    );
    static final MethodHandle alloca$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "alloca",
            "(J)Ljdk/incubator/foreign/MemoryAddress;",
            constants$32.alloca$FUNC, false
    );
    static final FunctionDescriptor valloc$FUNC = FunctionDescriptor.of(C_POINTER,
            C_LONG
    );
    static final MethodHandle valloc$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "valloc",
            "(J)Ljdk/incubator/foreign/MemoryAddress;",
            constants$32.valloc$FUNC, false
    );
    static final FunctionDescriptor posix_memalign$FUNC = FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_LONG,
            C_LONG
    );
    static final MethodHandle posix_memalign$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "posix_memalign",
            "(Ljdk/incubator/foreign/MemoryAddress;JJ)I",
            constants$32.posix_memalign$FUNC, false
    );
}


