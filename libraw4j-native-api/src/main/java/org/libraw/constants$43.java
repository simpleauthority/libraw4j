// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.FunctionDescriptor;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_DOUBLE;

class constants$43 {

    static final FunctionDescriptor __atan$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle __atan$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__atan",
            "(D)D",
            constants$43.__atan$FUNC, false
    );
    static final FunctionDescriptor atan2$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle atan2$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "atan2",
            "(DD)D",
            constants$43.atan2$FUNC, false
    );
    static final FunctionDescriptor __atan2$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle __atan2$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__atan2",
            "(DD)D",
            constants$43.__atan2$FUNC, false
    );
    static final FunctionDescriptor cos$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle cos$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "cos",
            "(D)D",
            constants$43.cos$FUNC, false
    );
    static final FunctionDescriptor __cos$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle __cos$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__cos",
            "(D)D",
            constants$43.__cos$FUNC, false
    );
    static final FunctionDescriptor sin$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle sin$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "sin",
            "(D)D",
            constants$43.sin$FUNC, false
    );
}


