// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;

public interface at_quick_exit$__func {

    static MemoryAddress allocate(at_quick_exit$__func fi) {
        return RuntimeHelper.upcallStub(at_quick_exit$__func.class, fi, constants$33.at_quick_exit$__func$FUNC, "()V");
    }

    static MemoryAddress allocate(at_quick_exit$__func fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(at_quick_exit$__func.class, fi, constants$33.at_quick_exit$__func$FUNC, "()V", scope);
    }

    static at_quick_exit$__func ofAddress(MemoryAddress addr) {
        return () -> {
            try {
                constants$34.at_quick_exit$__func$MH.invokeExact((Addressable) addr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }

    void apply();
}


