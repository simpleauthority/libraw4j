// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.FunctionDescriptor;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_FLOAT;
import static jdk.incubator.foreign.CLinker.C_POINTER;

class constants$70 {

    static final FunctionDescriptor __asinhf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __asinhf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__asinhf",
            "(F)F",
            constants$70.__asinhf$FUNC, false
    );
    static final FunctionDescriptor atanhf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle atanhf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "atanhf",
            "(F)F",
            constants$70.atanhf$FUNC, false
    );
    static final FunctionDescriptor __atanhf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __atanhf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__atanhf",
            "(F)F",
            constants$70.__atanhf$FUNC, false
    );
    static final FunctionDescriptor expf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle expf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "expf",
            "(F)F",
            constants$70.expf$FUNC, false
    );
    static final FunctionDescriptor __expf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __expf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__expf",
            "(F)F",
            constants$70.__expf$FUNC, false
    );
    static final FunctionDescriptor frexpf$FUNC = FunctionDescriptor.of(C_FLOAT,
            C_FLOAT,
            C_POINTER
    );
    static final MethodHandle frexpf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "frexpf",
            "(FLjdk/incubator/foreign/MemoryAddress;)F",
            constants$70.frexpf$FUNC, false
    );
}


