// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.FunctionDescriptor;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_FLOAT;
import static jdk.incubator.foreign.CLinker.C_INT;

class constants$65 {

    static final FunctionDescriptor __fpclassifyf$FUNC = FunctionDescriptor.of(C_INT,
            C_FLOAT
    );
    static final MethodHandle __fpclassifyf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__fpclassifyf",
            "(F)I",
            constants$65.__fpclassifyf$FUNC, false
    );
    static final FunctionDescriptor __signbitf$FUNC = FunctionDescriptor.of(C_INT,
            C_FLOAT
    );
    static final MethodHandle __signbitf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__signbitf",
            "(F)I",
            constants$65.__signbitf$FUNC, false
    );
    static final FunctionDescriptor __isinff$FUNC = FunctionDescriptor.of(C_INT,
            C_FLOAT
    );
    static final MethodHandle __isinff$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__isinff",
            "(F)I",
            constants$65.__isinff$FUNC, false
    );
    static final FunctionDescriptor __finitef$FUNC = FunctionDescriptor.of(C_INT,
            C_FLOAT
    );
    static final MethodHandle __finitef$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__finitef",
            "(F)I",
            constants$65.__finitef$FUNC, false
    );
    static final FunctionDescriptor __isnanf$FUNC = FunctionDescriptor.of(C_INT,
            C_FLOAT
    );
    static final MethodHandle __isnanf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__isnanf",
            "(F)I",
            constants$65.__isnanf$FUNC, false
    );
    static final FunctionDescriptor __iseqsigf$FUNC = FunctionDescriptor.of(C_INT,
            C_FLOAT,
            C_FLOAT
    );
    static final MethodHandle __iseqsigf$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__iseqsigf",
            "(FF)I",
            constants$65.__iseqsigf$FUNC, false
    );
}


