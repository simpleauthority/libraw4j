// Generated by jextract

package org.libraw;

import jdk.incubator.foreign.FunctionDescriptor;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_DOUBLE;

class constants$50 {

    static final FunctionDescriptor __log2$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle __log2$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__log2",
            "(D)D",
            constants$50.__log2$FUNC, false
    );
    static final FunctionDescriptor pow$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle pow$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "pow",
            "(DD)D",
            constants$50.pow$FUNC, false
    );
    static final FunctionDescriptor __pow$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle __pow$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__pow",
            "(DD)D",
            constants$50.__pow$FUNC, false
    );
    static final FunctionDescriptor sqrt$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle sqrt$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "sqrt",
            "(D)D",
            constants$50.sqrt$FUNC, false
    );
    static final FunctionDescriptor __sqrt$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle __sqrt$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "__sqrt",
            "(D)D",
            constants$50.__sqrt$FUNC, false
    );
    static final FunctionDescriptor hypot$FUNC = FunctionDescriptor.of(C_DOUBLE,
            C_DOUBLE,
            C_DOUBLE
    );
    static final MethodHandle hypot$MH = RuntimeHelper.downcallHandle(
            libraw_h.LIBRARIES, "hypot",
            "(DD)D",
            constants$50.hypot$FUNC, false
    );
}


